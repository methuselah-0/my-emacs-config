# -*- mode: snippet -*-
# expand-env: ((yas-after-exit-snippet-hook #'org-align-all-tags) (yas-indent-line 'fixed) (yas-wrap-around-region 'nil))
# name: <nsbpfs
# key: <nsbpfs
# --
**$1 TODO $2						:_public_function_:

#+name: $6_$5__$2-info
$8

***$1 NEXT $2-test					:_public_function_test_:
:PROPERTIES:
:header-args: :noweb-ref $6_$5__$2-tests :session test
:END:

A function that invokes ~$6_$5__$2~ and parses the result in order to being
able to provide it to a test.

#+name: $6_$5__$2-test-f
#+begin_src bash
$6_$5__$2_test_f(){
    local a
    a=$($6_$5__$2 $3)
    declare -p a
}
#+end_src

Test 1:

#+name: $6_$5__$2-test-1
#+begin_src bash 
  $6_$5__$2_test_1()(
      . <($6_$5__$2_test_f)
      [[ "\${a}" == $4 ]] || { echo FAIL && return 1; }
      echo PASS && return 0
  )
#+end_src

All tests:

#+name: $6_$5__$2-test-main
#+begin_src bash :tangle src/$6/$5/$2-test.sh :noweb-ref $6_$5-tests :var org_args="()"
  . bcu.sh
  #<<$6_$5__$2>>#
  #<<$6_$5__$2-tests>>#
  $6_$5__$2_test_main(){
      printf $6_$5__$2_test_1.. ; $6_$5__$2_test_1
  }
  declare -a org_args="\${org_args}"
  if [ "\${1:-\${org_args[0]}}" != "--source-only" ]; then
      # $@ evaluates to all of the arguments passed to the function or script as individual strings.
      if [[ -n "\$org_args" ]]; then
	  $6_$5__$2_test_main "\${org_args[@]}"
      else
	  $6_$5__$2_test_main "\${@}"
      fi
  fi
#+end_src

***$1 TODO $2-definition					:_public_function_definition_:

#+name: $6_$5__${2:enumerate}
#+begin_src bash :noweb yes :noweb-ref "$6_$5__${2:enumerate}"
  $6_$5__$2()(
      local _STACK z Options=() Input=() $7
      [[ "\$1" =~ ^(-h|--help)$ ]] && {
	  local _DESCRIPTION _EXAMPLE	
      # shellcheck disable=SC2034
      _DESCRIPTION=\$(cat <<'EOF'
  #<<$6_$5__$2-description()>>#
  EOF
  )
      # shellcheck disable=SC2034
      _EXAMPLE=\$(cat <<'EOF'
  #<<$6_$5__$2-example()>>#
  EOF
  )
      }    
      # Options
      local null=(z null "" "Read null-separated operands from stdin" 0)    
      Options+=("(\${null[*]@Q})")

      # Operands
      # shellcheck disable=SC2034
      local -a Operands=(1:t:$7)

      # Parse args
      # shellcheck disable=SC2034
      [[ ! -t 0 ]] && mapfile -t -d '' Input
      bcu__setopts "\$@" || {
          printf '%s' "Parsing input failed: \${_STACK}" && bcu__stack "\$@" && return 1; }
      [[ "\$1" =~ ^(-h|--help)$ ]] && return 0

      # Check args
      $0
  )
#+end_src

#+name: $6_$5__$2-description
#+begin_src bash :noweb-ref "$6_$5__$2-description" :var apa=$6_$5__$2-info :session :exports none
cat <<EOF
\$apa
EOF
#+end_src

***$1 TODO $2-example					:_public_function_example_:

#+name: $6_$5__$2-ex
#+begin_src bash :noweb-ref "$6_$5__$2-ex" :cache yes :eval query-export
  $6_$5__$2 $3
#+end_src

#+name: $6_$5__$2-example
#+begin_src bash :noweb-ref "$6_$5__$2-example" :cache yes :session :exports none
  cat <<'EOF'
  Example:

      #<<$6_$5__$2-ex>>#
  
  Results:

      #<<$6_$5__$2-ex()>>#
      
  EOF
#+end_src
