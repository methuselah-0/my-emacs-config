;;; Compiled snippets and support files for `org-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'org-mode
		     '(("<w" "#+begin_warning\n$0\n#+end_warning\n" "<w" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/warning" nil nil)
		       ("<t" "#+begin_tip\n$0\n#+end_tip\n" "<t" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/tip" nil nil)
		       ("<n" "#+begin_note\n$0\n#+end_note\n" "<n" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/note" nil nil)
		       ("<nsb" "#+name: $0\n#+begin_src bash :session test\n\n#+end_src" "<nsb" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/named-bash-source-block" nil nil)
		       ("<i" "#+begin_info\n$0\n#+end_info\n" "<i" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/info" nil nil)
		       ("<inc" "#+include: $0" "<inc" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/include" nil nil)
		       ("<h" ":PROPERTIES:\n:header-args: $0\n:END:\n" "<h" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/header-args-properties" nil nil)
		       ("<e" "#+begin_example\n$0\n#+end_example\n" "<e" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/example" nil nil)
		       ("<test" "#+name: $1-test-$2\n#+begin_src bash\n  $1_test_$2()(\n      [[ \"\\$($1 $0)\" == ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n" "<test" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<test" nil nil)
		       ("<sb" "#+begin_src bash\n$0\n#+end_src\n" "<sb" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<sb" nil nil)
		       ("<rt" "#+NAME: $1\n#+CAPTION: \"$2\"\n#+ATTR_HTML: :class right-table\n$0" "<rt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<rt" nil nil)
		       ("<nsp" "#+BEGIN_SRC python :noweb-ref $1\n$0\n#+END_SRC" "<nsp" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsp" nil nil)
		       ("<nsel" "#+begin_src emacs-lisp\n$0\n#+end_src\n" "<nsel" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsel" nil nil)
		       ("<nsbusage" "#+name: ${1:enumerate}-usage\n#+begin_src bash\n$1_usage(){\ncat <<'EOF'\nExample:\n\n    <<$1-ex>>\n\nResults:\n\n    <<$1-ex()>>\n\nEOF\n}\n#+end_src\n$0" "<nsbusage" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsbusage" nil nil)
		       ("<nsbt" "#+name: $1-test\n#+begin_src bash :noweb-ref \"\"\n$0\n#+end_src\n" "<nsbt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsbt" nil nil)
		       ("<nsbpfs" "**$1 TODO $2						:_public_function_:\n\n#+name: $6_$5__$2-info\n$8\n\n***$1 NEXT $2-test					:_public_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $6_$5__$2-tests :session test\n:END:\n\nA function that invokes ~$6_$5__$2~ and parses the result in order to being\nable to provide it to a test.\n\n#+name: $6_$5__$2-test-f\n#+begin_src bash\n$6_$5__$2_test_f(){\n    local a\n    a=$($6_$5__$2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1:\n\n#+name: $6_$5__$2-test-1\n#+begin_src bash \n  $6_$5__$2_test_1()(\n      . <($6_$5__$2_test_f)\n      [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n\nAll tests:\n\n#+name: $6_$5__$2-test-main\n#+begin_src bash :tangle src/$6/$5/$2-test.sh :noweb-ref $6_$5-tests :var org_args=\"()\"\n  . bcu.sh\n  #<<$6_$5__$2>>#\n  #<<$6_$5__$2-tests>>#\n  $6_$5__$2_test_main(){\n      printf $6_$5__$2_test_1.. ; $6_$5__$2_test_1\n  }\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $6_$5__$2_test_main \"\\${org_args[@]}\"\n      else\n	  $6_$5__$2_test_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n***$1 TODO $2-definition					:_public_function_definition_:\n\n#+name: $6_$5__${2:enumerate}\n#+begin_src bash :noweb yes :noweb-ref \"$6_$5__${2:enumerate}\"\n  $6_$5__$2()(\n      local _STACK z Options=() Input=() $7\n      [[ \"\\$1\" =~ ^(-h|--help)$ ]] && {\n	  local _DESCRIPTION _EXAMPLE	\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  #<<$6_$5__$2-description()>>#\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  #<<$6_$5__$2-example()>>#\n  EOF\n  )\n      }    \n      # Options\n      local null=(z null \"\" \"Read null-separated operands from stdin\" 0)    \n      Options+=(\"(\\${null[*]@Q})\")\n\n      # Operands\n      # shellcheck disable=SC2034\n      local -a Operands=(1:t:$7)\n\n      # Parse args\n      # shellcheck disable=SC2034\n      [[ ! -t 0 ]] && mapfile -t -d '' Input\n      bcu__setopts \"\\$@\" || {\n          printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n      [[ \"\\$1\" =~ ^(-h|--help)$ ]] && return 0\n\n      # Check args\n      $0\n  )\n#+end_src\n\n#+name: $6_$5__$2-description\n#+begin_src bash :noweb-ref \"$6_$5__$2-description\" :var apa=$6_$5__$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n***$1 TODO $2-example					:_public_function_example_:\n\n#+name: $6_$5__$2-ex\n#+begin_src bash :noweb-ref \"$6_$5__$2-ex\" :cache yes :eval query-export\n  $6_$5__$2 $3\n#+end_src\n\n#+name: $6_$5__$2-example\n#+begin_src bash :noweb-ref \"$6_$5__$2-example\" :cache yes :session :exports none\n  cat <<'EOF'\n  Example:\n\n      #<<$6_$5__$2-ex>>#\n  \n  Results:\n\n      #<<$6_$5__$2-ex()>>#\n      \n  EOF\n#+end_src\n" "<nsbpfs" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbpfs" nil nil)
		       ("<nsbpf" "***$1 TODO $2						:_private_function_:\n\n#+name: $2-info\n\n****$1 NEXT $2-test					:_private_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $2-tests :session test\n:END:\n\nA function that invokes ~$2~ and parses the result in order to being\nable to provide well formatted output to $2-tests.\n\n#+name: $2-test-f\n#+begin_src bash\n$2_test_f(){\n    local a\n    a=$($2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1 for $2:\n\n#+name: $2-test-1\n#+begin_src bash\n  $2_test_1()(\n      . <($2_test_f)\n      [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n\nAll tests for the $2 function\n\n#+name: $2-test-main\n#+begin_src bash :tangle src/$5/$2-test.sh :noweb-ref $5-tests :var org_args=\"()\"\n  . bcu.sh\n  <<$2>>\n  <<$2-tests>>\n  $2_test_main(){\n      printf $2_test_1.. ; $2_test_1\n  }\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $2_test_main \"\\${org_args[@]}\"\n      else\n	  $2_test_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n****$1 TODO $2-definition					:_private_function_definition_:\n\n#+name: ${2:enumerate}\n#+begin_src bash :noweb-ref $5.sh.acc.priv :noweb yes\n  bcu__$2(){\n      local _STACK z Options=() Input=() $7\n      [[ \"\\$1\" =~ (-h|--help) ]] && {\n	  local _DESCRIPTION _EXAMPLE	\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  <<$2-description()>>\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  <<$2-example()>>\n  EOF\n  )\n      }    \n      # Options\n      local null=(z null \"\" \"Read null-separated operands from stdin\" 0)    \n      Options+=(\"(\\${null[*]@Q})\")\n\n      # Operands\n      # shellcheck disable=SC2034\n      local -a Operands=(1:t:$7)\n\n      # Parse args\n      # shellcheck disable=SC2034\n      [[ ! -t 0 ]] && mapfile -t -d '' Input\n      bcu__setopts \"\\$@\" || {\n          printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n      [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n\n      # Check args\n      $0\n  }\n#+end_src\n\n#+name: $2-description\n#+begin_src bash :noweb-ref \"\" :var apa=$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n****$1 TODO $2-example					:_private_function_example_:\n\n#+name: $2-ex\n#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export\n  $2 $3\n#+end_src\n\n#+name: $2-example\n#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none\n  cat <<'EOF'\n  Example:\n\n      <<$2-ex>>\n  \n  Results:\n\n      <<$2-ex()>>\n      \n  EOF\n#+end_src\n" "<nsbpf" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbpf" nil nil)
		       ("<nsbf" "**$1 TODO $2						:_public_function_:\n\n#+name: $2-info\n$6\n\n***$1 NEXT $2-test					:_public_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $2-tests :session test\n:END:\n\nA function that invokes ~$2~ and parses the result in order to being\nable to provide it to a test.\n\n#+name: $2-test-f\n#+begin_src bash\n$2_test_f(){\n    local a\n    a=$(bcu__$2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1:\n\n#+name: $2-test-1\n#+begin_src bash \n  $2_test_1()(\n      . <($2_test_f)\n      [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n\nAll tests:\n\n#+name: $2-test-main\n#+begin_src bash :tangle src/$5/$2-test.sh :noweb-ref $5-tests :var org_args=\"()\"\n  . bcu.sh\n  <<$2>>\n  <<$2-tests>>\n  $2_test_main(){\n      printf $2_test_1.. ; $2_test_1\n  }\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $2_test_main \"\\${org_args[@]}\"\n      else\n	  $2_test_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n***$1 TODO $2-definition					:_public_function_definition:\n\n#+name: ${2:enumerate}\n#+begin_src bash :noweb yes\n  bcu__$2()(\n      local _STACK z Options=() Input=() $7\n      [[ \"\\$1\" =~ (-h|--help) ]] && {\n	  local _DESCRIPTION _EXAMPLE	\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  <<$2-description()>>\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  <<$2-example()>>\n  EOF\n  )\n      }    \n      # Options\n      local null=(z null \"\" \"Read null-separated operands from stdin\" 0)    \n      Options+=(\"(\\${null[*]@Q})\")\n\n      # Operands\n      # shellcheck disable=SC2034\n      local -a Operands=(1:t:$7)\n\n      # Parse args\n      # shellcheck disable=SC2034\n      [[ ! -t 0 ]] && mapfile -t -d '' Input\n      bcu__setopts \"\\$@\" || {\n          printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n      [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n\n      # Check args\n      $0\n  )\n#+end_src\n\n#+name: $2-description\n#+begin_src bash :noweb-ref \"\" :var apa=$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n***$1 TODO $2-example					:_public_function_example_:\n\n#+name: $2-ex\n#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export\n  bcu__$2 $3\n#+end_src\n\n#+name: $2-example\n#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none\n  cat <<'EOF'\n  Example:\n\n      <<$2-ex>>\n  \n  Results:\n\n      <<$2-ex()>>\n      \n  EOF\n#+end_src\n" "<nsbf" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbf" nil nil)
		       ("<namei" "#+name: $0-info" "<namei" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<name" nil nil)
		       ("<lt" "#+NAME: $1\n#+CAPTION: \"$2\"\n#+ATTR_HTML: :class left-table\n$0" "<lt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<lt" nil nil)
		       ("<i" "#+begin_info\n$0\n#+end_info" "<i" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<info" nil nil)
		       ("<ha" "#+attr_html: $0" "<ha" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<ha" nil nil)
		       ("<exh" "#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export" "<exh" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<exh" nil nil)
		       ("<exah" "#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none" "<exah" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<exah" nil nil)
		       ("<desccode" "      local _DESCRIPTION _EXAMPLE z\n      [[ \"$1\" =~ (-h|--help) ]] && {\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  <<$1-description()>>\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  <<$1-example()>>\n  EOF\n  )\n  }\n" "<desccode" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<desccode" nil nil)
		       ("<desc" "#+name: $1-description\n#+begin_src bash :noweb-ref \"\" :var apa=$1-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n$0" "<desc" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<desc" nil nil)
		       ("<bmod" "*$1 TODO ${2:modulename}\n:PROPERTIES:\n:header-args: :noweb-ref $2.sh.acc :session test\n:END:\n\n#+name:	$2.sh\n#+begin_src bash :tangle src/$2/$2.sh :noweb-ref \"\"\n  [[ \"$_BCU_SH_LOADED\" == YES ]] || . bcu.sh\n  _$2_MOD_DIR=\\$(dirname \"$(readlink -f \"\\${BASH_SOURCE[0]}\")\")\n  <<$2.sh.acc>>\n  $2_private(){\n      :\n  <<$2.sh.acc.priv>>\n  }\n  <<$2-main>>\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # \\$@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $2_main \"\\${org_args[@]}\"\n      else\n	  $2_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n**$1 TODO $2-unit-tests						:_module_tests_:\n\nThe collected unit tests of $2\n\n#+name: $2-unit-tests\n#+begin_src bash :tangle src/$2/$2-test.sh :noweb-ref $2-unit-tests :var org_args=\"()\"\n  [[ \"$_BCU_SH_LOADED\" == YES ]] || . bcu.sh\n  _$2_MOD_DIR=\\$(dirname \"$(readlink -f \"\\${BASH_SOURCE[0]}\")\")\n  $2_private(){\n      :\n  <<$2.sh.acc.priv>>\n  }\n  $2_test_main(){\n  <<$2-tests>>  \n  }\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $2_test_main \"\\${org_args[@]}\"\n      else\n	  $2_test_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n**$1 TODO $2-main                                        :_module_main_function_:\n\nThe main function of $2\n\n#+name: $2-main\n#+begin_src bash :noweb-ref \"\" :var org_args=\"()\"\n  $2_main(){\n      :\n  }\n#+end_src\n$0\n" "<bmod" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<bmod" nil nil)
		       ("<bbp" "    # shellcheck disable=SC2034\n    local _STACK z Options=() Input=() $2\n    [[ \"\\$1\" =~ (-h|--help) ]] && {\n	local _DESCRIPTION _EXAMPLE	\n	# shellcheck disable=SC2034\n	_DESCRIPTION=\\$(cat <<'EOF'\n<<$1-description()>>\nEOF\n)\n	# shellcheck disable=SC2034\n	_EXAMPLE=\\$(cat <<'EOF'\n<<$1-example()>>\nEOF\n)\n    }\n\n    # Options\n    local null=(z null \"\" \"Read null-separated input from stdin\" 0)\n    Options+=(\"(\\${null[*]@Q})\")\n\n    # Operands\n    # shellcheck disable=SC2034\n    local -a Operands=(1:t:$2)\n\n    # Parse args\n    # shellcheck disable=SC2034\n    [[ ! -t 0 ]] && mapfile -t -d '' Input\n    setopts \"\\$@\" || { printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n    [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n    $0" "<bbp" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<bbp" nil nil)))


;;; Do not edit! File generated at Wed Oct 28 09:51:54 2020
