;;; Compiled snippets and support files for `org-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'org-mode
		     '(("<w" "#+begin_warning\n$0\n#+end_warning\n" "<w" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/warning" nil nil)
		       ("<t" "#+begin_tip\n$0\n#+end_tip\n" "<t" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/tip" nil nil)
		       ("<nspf" "#+BEGIN_SRC python :noweb-ref $1.lib :session $1.lib\ndef $2($3):\n    $0\n#+END_SRC\n" "org-python-function" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/org-python-function" nil nil)
		       ("<n" "#+begin_note\n$0\n#+end_note\n" "<n" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/note" nil nil)
		       ("<nsb" "#+name: $0\n#+begin_src bash :session test\n\n#+end_src" "<nsb" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/named-bash-source-block" nil nil)
		       ("<i" "#+begin_info\n$0\n#+end_info\n" "<i" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/info" nil nil)
		       ("<inc" "#+include: $0" "<inc" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/include" nil nil)
		       ("<h" ":PROPERTIES:\n:header-args: $0\n:END:\n" "<h" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/header-args-properties" nil nil)
		       ("<e" "#+begin_example\n$0\n#+end_example\n" "<e" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/example" nil nil)
		       ("<test" "#+name: $1-test-$2\n#+begin_src bash\n  $1_test_$2()(\n      [[ \"\\$($1 $0)\" == ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n" "<test" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<test" nil nil)
		       ("<sb" "#+begin_src bash\n$0\n#+end_src\n" "<sb" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<sb" nil nil)
		       ("<rt" "#+NAME: $1\n#+CAPTION: \"$2\"\n#+ATTR_HTML: :class right-table\n$0" "<rt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<rt" nil nil)
		       ("<pysubmod" "** ${3:submodulename}\n\nImports:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3.lib :tangle ${2:modulename}/$3.py\n# exports $2.$3\n\"\"\"Submod Doc-String\"\"\"\n#<<$2.$3.imports>>#\n#+END_SRC\n\nThe collected classes, functions and global variables in the library:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# export $2.$3\n#<<$2.$3.globals>>#\n#<<$2.$3.lib>>#\n#+END_SRC\n\nThe collected tests in the $2.test_$3 module.\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/test_$3.py\n# exporti $2.test_$3\nfrom ${1:appname}.$2.$3 import *\n#<<$2.$3.test>>#\n#+END_SRC\n\nThe main code:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports $2.$3\ndef main_$3():\n    pass\n    #<<$2.$3.main>>#\n#+END_SRC\n\n** The Story of $3\n$0\n#+BEGIN_SRC python :noweb-ref \"$2.$3.imports\" :session $3\n# exports $2.$3\nfrom myapp.utils.libutils import export\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.lib\" :session $3\n# exports $2.$3\ndef hello_$3():\n    \"hello_$3() returns the string \\\\\\\"Hello, world!\\\\\\\"\"\n    return \"Hello, world!\"\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.test\" :session $3\n# exports $2.test_$3\ndef test_hello_$3():\n    \"\"\"Testing the hello function\"\"\"\n    assert hello_$3() == \"Hello, world!\"\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.main\" :session $3\nprint(hello_$3())\n#+END_SRC\n\n** Test Results for $3\n\n#+begin_src bash :session $3_test :results output\npytest $2/test_$3.py\n#+end_src\n\n** CLI Arguments to $3\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports $2.$3\nif __name__ == \"__main__\":\n    main_$3()\n#+END_SRC\n" "<pysubmod" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<pysubmod" nil nil)
		       ("<pymod" "* ${2:modulename}\n\nThe =__init__= thing\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle $2/__init__.py\n#+END_SRC\n\n** ${3:submodulename}\n\nImports:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3.lib :tangle $2/$3.py\n# exports $2.$3\n\"\"\"Submod Doc-String\"\"\"\n#<<$2.$3.imports>>#\n#+END_SRC\n\nThe collected classes, functions and global variables in the library:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n#<<$2.$3.globals>>#\n#<<$2.$3.lib>>#\n#+END_SRC\n\nThe collected tests in the $2.test_$3 module.\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/test_$3.py\n# exporti $2.test_$3\nfrom ${1:appname}.$2.$3 import *\n#<<$2.$3.test>>#\n#+END_SRC\n\nThe main code:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports\ndef main_$3():\n    pass\n    #<<$2.$3.main>>#\n#+END_SRC\n\n*** The Story of $3\n$0\n#+BEGIN_SRC python :noweb-ref \"$2.$3.imports\" :session $3\n# exports $2.$3\nfrom myapp.utils.libutils import export\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.lib\" :session $3\n# exports $2.$3\ndef hello_$3():\n    \"hello_$3() returns the string \\\\\\\"Hello, world!\\\\\\\"\"\n    return \"Hello, world!\"\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.test\" :session $3\n# exports $2.test_$3\ndef test_hello_$3():\n    \"\"\"Testing the hello function\"\"\"\n    assert hello_$3() == \"Hello, world!\"\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.main\" :session $3\nprint(hello_$3())\n#+END_SRC\n\n*** Test Results for $3\n\n#+begin_src bash :session $3_test :results output\npytest $2/test_$3.py\n#+end_src\n\n*** CLI Arguments to $3\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports $2.$3\nif __name__ == \"__main__\":\n    main_$3()\n#+END_SRC\n" "<pymod" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<pymod" nil nil)
		       ("<pyapp" "#+PROPERTY: header-args:python :shebang \"#!/usr/bin/env python3\" :eval no-export :noweb no-export :mkdirp yes\n#+PROPERTY: header-args:jupyter-python :shebang \"#!/usr/bin/env python3\" :eval no-export :noweb no-export :mkdirp yes\n#+PROPERTY: header-args:bash :shebang \"#!/usr/bin/env bash\" :eval no-export :noweb no-export :mkdirp yes\n#+OPTIONS: ^:{}\n\n#+TITLE: ${1:appname}\n#+SUMMARY: This is the $1 app\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle __init__.py\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle tests/__init__.py\n#+END_SRC\n\nBelow is the story of $1\n\n* utils\n\n[[https://stackoverflow.com/a/35710527/7612826][Reference]]\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle utils/__init__.py\n#+END_SRC\n\n** libutils\n\nWhen importing the export function from this module, we can use\n@export as decorator for functions we want included in ~__all__~.\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle utils/libutils.py :session $1\n# export utils.libutils\nimport sys\ndef export(fn):\n    mod = sys.modules[fn.__module__]\n    if hasattr(mod, '__all__'):\n        mod.__all__.append(fn.__name__)\n    else:\n        mod.__all__ = [fn.__name__]\n    return fn\n#+END_SRC\n\n* ${2:modulename} - Overview\n\nThe =__init__= thing\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle $2/__init__.py\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"\" :tangle tests/__init__.py\n#+END_SRC\n\n** ${3:submodulename} - API\n\n*** Imports\n\nImports in $3:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports $2.$3\n\"\"\"Submod Doc-String\"\"\"\nimport sys, os, inspect\ncurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparentdir = os.path.dirname(currentdir)\nsys.path.insert(0, parentdir)\n#<<$2.$3.imports>>#\n#+END_SRC\n\n*** Lib\n\nThe collected classes, functions and global variables in the library:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# export $2.$3\n#<<$2.$3.globals>>#\n#<<$2.$3.lib>>#\n#+END_SRC\n\n*** Internal\n\nInternal functions and classes are not shown here, but documented\nthroughout the story.\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/test_$3.py\n# exporti $2.test_$3\nfrom $1.utils.libutils import export\nfrom $1.$2.$3 import *\n#<<$2.$3.test>>#\n#+END_SRC\n\n*** Tests\n\nThe collected tests go in the $2.test_$3 module\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle tests/$2/test_$3.py\n# exporti $2.test_$3\nfrom $1.utils.libutils import export\nfrom $1.$2.$3 import *\n#<<$2.$3.test>>#\n#+END_SRC\n\n*** Main\n\nThe main code:\n\n#+BEGIN_SRC python :noweb-ref \"\" :session $3 :tangle $2/$3.py\n# exports $2.$3\n@export\ndef main_$3():\n    pass\n    #<<$2.$3.main>>#\n#<<$2.$3.cli>>#\n#+END_SRC\n\n** $3 - Test Results\n\n#+begin_src python :session $3_test :results output :exports both\nimport subprocess\nprint(subprocess.check_output(\"pytest $2/test_$3.py\", shell = True).decode(\"utf-8\"))\n#+end_src\n\n** $3 - CLI Arguments\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.cli\" :session $3 :tangle $2/$3.py\n# exports $2.$3\nif len(sys.argv) > 1:\n    if sys.argv[1] == \"main_$3\":\n        main_$3()\n# END_OF_MODULE\n#+END_SRC\n\n* Ch. 1 $2.$3\n$0\n#+BEGIN_SRC python :noweb-ref \"$2.$3.imports\" :session $3\n# exports $2.$3\nfrom $1.utils.libutils import export\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.lib\" :session $3\n# exports $2.$3\n@export\ndef hello_$3():\n    \"hello_$3() returns the string \\\\\\\"Hello, world!\\\\\\\"\"\n    return \"Hello, world!\"\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.test\" :session $3\n# exports $2.test_$3\n@export\ndef test_hello_$3():\n    \"\"\"hello_$3 must return the string \\\\\\\"Hello, world!\\\\\\\"\"\"\"\n    assert hello_$3() == \"Hello, world!\"\n#+END_SRC\n\nIn the main function we can now run:\n\n#+BEGIN_SRC python :noweb-ref \"$2.$3.main\" :session $3\nprint(hello_$3())\n#+END_SRC\n\n* $1 - Test Results\n\n#+begin_src python :session $1_test :results output :exports both\nimport subprocess\nprint(subprocess.check_output(\"pytest .\", shell = True).decode(\"utf-8\"))\n#+end_src\n\n* Building docs\n\n#+begin_src python :session $1_docs :results output :exports both :async yes\nimport subprocess\nlibs_order = \"utils_temp.ipynb libutils_temp.ipynb $2_temp.ipynb $3_temp.ipynb test_$3_temp.ipynb $1_temp.ipynb\"\ncmd = \"cd ../../ && \" + \"_NBDEV_ORG_BABEL_ARGS=\\\\\\\"--build-libs-order \" + libs_order + \"\\\\\\\" nbdev_build_docs_from_org\" + \"; cd -\"\nprint(subprocess.check_output(cmd, shell = True).decode(\"utf-8\"))\n#+end_src\n\n* Running $1\n\nFrom the command-line:\n\n#+begin_src bash :session run\nPYTHONPATH=$\\(a=$\\(pwd);echo \"$\\{a%/*}\"):$PYTHONPATH python3 -m $1.$2.$3 main_$3\n#+end_src\n\nOr in a guix virtualenv for the org-babel lib-outputs:\n\n#+BEGIN_SRC bash :noweb-ref \"\" :tangle ../.guix-env\nmapfile -t Reqs < <(grep -oP '(?<=\\ )[0-9a-zA-Z-_]+' <(grep -E '^requirements = ' ../settings.ini))\n# guix environment --pure --ad-hoc python \"\\${Reqs[@]/#/python-}\" -- python3 -c 'import os; print(os.environ)'\nguix environment --pure --ad-hoc python \"\\${Reqs[@]/#/python-}\" -- python3 -m $1.$2.$3\n#+end_src\n\nOr in a guix virtualenv for the nbdev lib-outputs:\n\n#+BEGIN_SRC bash :noweb-ref \"\" :tangle ../../.guix-env\nmapfile -t Reqs < <(grep -oP '(?<=\\ )[0-9a-zA-Z-_]+' <(grep -E '^requirements = ' settings.ini))\n# guix environment --pure --ad-hoc python \"\\${Reqs[@]/#/python-}\" -- python3 -c 'import os; print(os.environ)'\nguix environment --pure --ad-hoc python \"\\${Reqs[@]/#/python-}\" -- python3 -m $1.$2.$3\n#+end_src\n\n* COMMENT babel settings\n  \n# Local Variables:\n# org-babel-noweb-wrap-start: \"#<<\"\n# org-babel-noweb-wrap-end: \">>#\"\n# org-confirm-babel-evaluate: nil\n# org-src-preserve-indentation: t\n# org-my-foo: bar\n# org-my-aNumber: 32\n# End:\n" "<pyapp" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<pyapp" nil nil)
		       ("<nspyt" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.test\" :session $2\n# exports\n@export\ndef test_${3:name}(${4:args}):\n    $0\n#+END_SRC\n" "<nspyt" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<nspyt" nil nil)
		       ("<nspym" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.main\" :session $2\n$0\n#+END_SRC\n" "<nspym" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nspym" nil nil)
		       ("<nspyi" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.imports\" :session $2\nfrom $3 import $0\n#+END_SRC\n" "<nspyi" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<nspyi" nil nil)
		       ("<nspyg" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.globals\" :session $2\n# exports\n$0\n#+END_SRC\n" "<nspyg" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<nspyg" nil nil)
		       ("<nspyf" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.lib\" :session $2\n# exports\n@export\ndef ${3:name}(${4:args}):\n    \"\"\"$5\"\"\"\n    $0\n#+END_SRC\n\n#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.test\" :session $2\n# exports\n@export\ndef test_$3($4):\n    \"\"\"$3 must return Y if given X as first argument\"\"\"\n    \n#+END_SRC\n" "<nspyf" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<nspyf" nil nil)
		       ("<nspyc" "#+BEGIN_SRC python :noweb-ref \"${1:modulename}.${2:submodulename}.lib\" :session $2\n# exports $1.$2\n@export\nclass ${3:name}(${4:args}):\n    $0\n#+END_SRC\n" "<nspyc" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<nspyc" nil nil)
		       ("<nsp" "#+BEGIN_SRC python :noweb-ref $1\n$0\n#+END_SRC" "<nsp" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsp" nil nil)
		       ("<nsel" "#+begin_src emacs-lisp\n$0\n#+end_src\n" "<nsel" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsel" nil nil)
		       ("<nsbusage" "#+name: ${1:enumerate}-usage\n#+begin_src bash\n$1_usage(){\ncat <<'EOF'\nExample:\n\n    <<$1-ex>>\n\nResults:\n\n    <<$1-ex()>>\n\nEOF\n}\n#+end_src\n$0" "<nsbusage" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsbusage" nil nil)
		       ("<nsbt" "#+name: $1-test\n#+begin_src bash :noweb-ref \"\"\n$0\n#+end_src\n" "<nsbt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<nsbt" nil nil)
		       ("<nsbpfs" "**$1 TODO $2						:_public_function_:\n\n#+name: $6_$5__$2-info\n$8\n\n***$1 NEXT $2-test					:_public_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $6_$5__$2-tests :session test\n:END:\n\nA function that invokes ~$6_$5__$2~ and parses the result in order to being\nable to provide it to a test.\n\n#+name: $6_$5__$2-test-f\n#+begin_src bash\n$6_$5__$2_test_f(){\n    local a\n    a=$($6_$5__$2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1:\n\n#+name: $6_$5__$2-test-1\n#+begin_src bash \n  $6_$5__$2_test_1()(\n      . <($6_$5__$2_test_f)\n      [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n      echo PASS && return 0\n  )\n#+end_src\n\nAll tests:\n\n#+name: $6_$5__$2-test-main\n#+begin_src bash :tangle src/$6/$5/$2-test.sh :noweb-ref $6_$5-tests :var org_args=\"()\"\n  . bcu.sh\n  #<<$6_$5__$2>>#\n  #<<$6_$5__$2-tests>>#\n  $6_$5__$2_test_main(){\n      printf $6_$5__$2_test_1.. ; $6_$5__$2_test_1\n  }\n  declare -a org_args=\"\\${org_args}\"\n  if [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n      # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n      if [[ -n \"\\$org_args\" ]]; then\n	  $6_$5__$2_test_main \"\\${org_args[@]}\"\n      else\n	  $6_$5__$2_test_main \"\\${@}\"\n      fi\n  fi\n#+end_src\n\n***$1 TODO $2-definition					:_public_function_definition_:\n\n#+name: $6_$5__${2:enumerate}\n#+begin_src bash :noweb yes :noweb-ref \"$6_$5__${2:enumerate}\"\n  $6_$5__$2()(\n      local _STACK z Options=() Input=() $7\n      [[ \"\\$1\" =~ ^(-h|--help)$ ]] && {\n	  local _DESCRIPTION _EXAMPLE	\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  #<<$6_$5__$2-description()>>#\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  #<<$6_$5__$2-example()>>#\n  EOF\n  )\n      }    \n      # Options\n      local null=(z null \"\" \"Read null-separated operands from stdin\" 0)    \n      Options+=(\"(\\${null[*]@Q})\")\n\n      # Operands\n      # shellcheck disable=SC2034\n      local -a Operands=(1:t:$7)\n\n      # Parse args\n      # shellcheck disable=SC2034\n      [[ ! -t 0 ]] && mapfile -t -d '' Input\n      bcu__setopts \"\\$@\" || {\n          printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n      [[ \"\\$1\" =~ ^(-h|--help)$ ]] && return 0\n\n      # Check args\n      $0\n  )\n#+end_src\n\n#+name: $6_$5__$2-description\n#+begin_src bash :noweb-ref \"$6_$5__$2-description\" :var apa=$6_$5__$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n***$1 TODO $2-example					:_public_function_example_:\n\n#+name: $6_$5__$2-ex\n#+begin_src bash :noweb-ref \"$6_$5__$2-ex\" :cache yes :eval query-export\n  $6_$5__$2 $3\n#+end_src\n\n#+name: $6_$5__$2-example\n#+begin_src bash :noweb-ref \"$6_$5__$2-example\" :cache yes :session :exports none\n  cat <<'EOF'\n  Example:\n\n      #<<$6_$5__$2-ex>>#\n  \n  Results:\n\n      #<<$6_$5__$2-ex()>>#\n      \n  EOF\n#+end_src\n" "<nsbpfs" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbpfs" nil nil)
		       ("<nsbpf" "***$1 TODO $2						:_private_function_:\n\n#+name: $2-info\n$6\n\n****$1 NEXT $2-test					:_private_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $2-tests :session test\n:END:\n\nA function that invokes ~$2~ and parses the result in order to being\nable to provide well formatted output to $2-tests.\n\n#+name: $2-test-f\n#+begin_src bash\n$2_test_f(){\n    local a\n    a=$($2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1 for $2:\n\n#+name: $2-test-1\n#+begin_src bash\n$2_test_1()(\n    . <($2_test_f)\n    [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n    echo PASS && return 0\n)\n#+end_src\n\nAll tests for the $2 function\n\n#+name: $2-test-main\n#+begin_src bash :noweb no-export :tangle src/$5/$2-test.sh :noweb-ref $5-tests :var org_args=\"()\"\n. bcu.sh\n#<<$2>>#\n#<<$2-tests>>#\n$2_test_main(){\n    printf $2_test_1.. ; $2_test_1\n}\ndeclare -a org_args=\"\\${org_args}\"\nif [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n    # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n    if [[ -n \"\\$org_args\" ]]; then\n        $2_test_main \"\\${org_args[@]}\"\n    else\n        $2_test_main \"\\${@}\"\n    fi\nfi\n#+end_src\n\n****$1 TODO $2-definition					:_private_function_definition_:\n\n#+name: ${2:enumerate}\n#+begin_src bash :noweb-ref $5.sh.acc.priv :noweb no-export\nbcu__$2(){\n    local _STACK z Options=() Input=() $7\n    [[ \"\\$1\" =~ (-h|--help) ]] && {\n        local _DESCRIPTION _EXAMPLE\n        # shellcheck disable=SC2034\n        _DESCRIPTION=\\$(cat <<'EOF'\n#<<$2-description()>>#\nEOF\n)\n    # shellcheck disable=SC2034\n    _EXAMPLE=\\$(cat <<'EOF'\n#<<$2-example()>>#\nEOF\n)\n    }\n    # Options\n    local null=(z null \"\" \"Read null-separated operands from stdin\" 0)\n    Options+=(\"(\\${null[*]@Q})\")\n\n    # Operands\n    # shellcheck disable=SC2034\n    local -a Operands=(1:t:$7)\n\n    # Parse args\n    # shellcheck disable=SC2034\n    [[ ! -t 0 ]] && mapfile -t -d '' Input\n    bcu__setopts \"\\$@\" || {\n       printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n    [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n\n    # Check args\n    $0\n}\n#+end_src\n\n#+name: $2-description\n#+begin_src bash :noweb-ref \"\" :var apa=$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n****$1 TODO $2-example					:_private_function_example_:\n\n#+name: $2-ex\n#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export\n$2 $3\n#+end_src\n\n#+name: $2-example\n#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none\ncat <<'EOF'\nExample:\n\n    #<<$2-ex>>#\n\nResults:\n\n    #<<$2-ex()>>#\n\nEOF\n#+end_src\n" "<nsbpf" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbpf" nil nil)
		       ("<nsbf" "**$1 TODO $2						:_public_function_:\n\n#+name: $2-info\n$6\n\n***$1 NEXT $2-test					:_public_function_test_:\n:PROPERTIES:\n:header-args: :noweb-ref $2-tests :session test\n:END:\n\nA function that invokes ~$2~ and parses the result in order to being\nable to provide it to a test.\n\n#+name: $2-test-f\n#+begin_src bash\n$2_test_f(){\n    local a\n    a=$(bcu__$2 $3)\n    declare -p a\n}\n#+end_src\n\nTest 1:\n\n#+name: $2-test-1\n#+begin_src bash\n$2_test_1()(\n    . <($2_test_f)\n    [[ \"\\${a}\" == $4 ]] || { echo FAIL && return 1; }\n    echo PASS && return 0\n)\n#+end_src\n\nAll tests:\n\n#+name: $2-test-main\n#+begin_src bash :tangle src/$5/$2-test.sh :noweb-ref $5-tests :var org_args=\"()\"\n. bcu.sh\n#<<$2>>#\n#<<$2-tests>>#\n$2_test_main(){\n    printf $2_test_1.. ; $2_test_1\n}\ndeclare -a org_args=\"\\${org_args}\"\nif [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n    # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n    if [[ -n \"\\$org_args\" ]]; then\n        $2_test_main \"\\${org_args[@]}\"\n    else\n	$2_test_main \"\\${@}\"\n    fi\nfi\n#+end_src\n\n***$1 TODO $2-definition					:_public_function_definition:\n\n#+name: ${2:enumerate}\n#+begin_src bash :noweb no-export\nbcu__$2()(\n    local _STACK z Options=() Input=() $7\n    [[ \"\\$1\" =~ (-h|--help) ]] && {\n        local _DESCRIPTION _EXAMPLE\n        # shellcheck disable=SC2034\n        _DESCRIPTION=\\$(cat <<'EOF'\n#<<$2-description()>>#\nEOF\n	)\n        # shellcheck disable=SC2034\n        _EXAMPLE=\\$(cat <<'EOF'\n#<<$2-example()>>#\nEOF\n	)\n    }\n    # Options\n    local null=(z null \"\" \"Read null-separated operands from stdin\" 0)\n    Options+=(\"(\\${null[*]@Q})\")\n\n    # Operands\n    # shellcheck disable=SC2034\n    local -a Operands=(1:t:$7)\n\n    # Parse args\n    # shellcheck disable=SC2034\n    [[ ! -t 0 ]] && mapfile -t -d '' Input\n    bcu__setopts \"\\$@\" || {\n        printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n    [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n\n    # Check args\n    $0\n)\n#+end_src\n\n#+name: $2-description\n#+begin_src bash :noweb-ref \"\" :var apa=$2-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n\n***$1 TODO $2-example					:_public_function_example_:\n\n#+name: $2-ex\n#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export\nbcu__$2 $3\n#+end_src\n\n#+name: $2-example\n#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none\ncat <<'EOF'\nExample:\n\n    #<<$2-ex>>#\n\nResults:\n\n    #<<$2-ex()>>#\n\nEOF\n#+end_src\n" "<nsbf" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<nsbf" nil nil)
		       ("<namei" "#+name: $0-info" "<namei" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<name" nil nil)
		       ("<lt" "#+NAME: $1\n#+CAPTION: \"$2\"\n#+ATTR_HTML: :class left-table\n$0" "<lt" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<lt" nil nil)
		       ("<i" "#+begin_info\n$0\n#+end_info" "<i" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<info" nil nil)
		       ("<ha" "#+attr_html: $0" "<ha" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<ha" nil nil)
		       ("<exh" "#+begin_src bash :noweb-ref \"\" :cache yes :eval query-export" "<exh" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<exh" nil nil)
		       ("<exah" "#+begin_src bash :noweb-ref \"\" :cache yes :session :exports none" "<exah" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<exah" nil nil)
		       ("<desccode" "      local _DESCRIPTION _EXAMPLE z\n      [[ \"$1\" =~ (-h|--help) ]] && {\n      # shellcheck disable=SC2034\n      _DESCRIPTION=\\$(cat <<'EOF'\n  <<$1-description()>>\n  EOF\n  )\n      # shellcheck disable=SC2034\n      _EXAMPLE=\\$(cat <<'EOF'\n  <<$1-example()>>\n  EOF\n  )\n  }\n" "<desccode" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<desccode" nil nil)
		       ("<desc" "#+name: $1-description\n#+begin_src bash :noweb-ref \"\" :var apa=$1-info :session :exports none\ncat <<EOF\n\\$apa\nEOF\n#+end_src\n$0" "<desc" nil nil nil "/home/user1/.emacs.d/snippets/org-mode/<desc" nil nil)
		       ("<bmod" "*$1 TODO ${2:modulename}\n:PROPERTIES:\n:header-args: :noweb-ref $2.sh.acc :session test\n:END:\n\n#+name:	$2.sh\n#+begin_src bash :tangle src/$2/$2.sh :noweb-ref \"\"\n[[ \"$_BCU_SH_LOADED\" == YES ]] || . bcu.sh\n_$2_MOD_DIR=\\$(dirname \"$(readlink -f \"\\${BASH_SOURCE[0]}\")\")\n#<<$2.sh.acc>>#\n$2_private(){\n      :\n#<<$2.sh.acc.priv>>#\n}\n#<<$2-main>>#\ndeclare -a org_args=\"\\${org_args}\"\nif [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n    # \\$@ evaluates to all of the arguments passed to the function or script as individual strings.\n    if [[ -n \"\\$org_args\" ]]; then\n        $2_main \"\\${org_args[@]}\"\n    else\n        $2_main \"\\${@}\"\n    fi\nfi\n#+end_src\n\n**$1 TODO $2-unit-tests						:_module_tests_:\n\nThe collected unit tests of $2\n\n#+name: $2-unit-tests\n#+begin_src bash :tangle src/$2/$2-test.sh :noweb-ref $2-unit-tests :var org_args=\"()\"\n[[ \"$_BCU_SH_LOADED\" == YES ]] || . bcu.sh\n_$2_MOD_DIR=\\$(dirname \"$(readlink -f \"\\${BASH_SOURCE[0]}\")\")\n$2_private(){\n    :\n#<<$2.sh.acc.priv>>#\n}\n$2_test_main(){\n#<<$2-tests>>#\n}\ndeclare -a org_args=\"\\${org_args}\"\nif [ \"\\${1:-\\${org_args[0]}}\" != \"--source-only\" ]; then\n    # $@ evaluates to all of the arguments passed to the function or script as individual strings.\n    if [[ -n \"\\$org_args\" ]]; then\n        $2_test_main \"\\${org_args[@]}\"\n    else\n        $2_test_main \"\\${@}\"\n    fi\nfi\n#+end_src\n\n**$1 TODO $2-main                                        :_module_main_function_:\n\nThe main function of $2\n\n#+name: $2-main\n#+begin_src bash :noweb-ref \"\" :var org_args=\"()\"\n$2_main(){\n    :\n}\n#+end_src\n$0\n" "<bmod" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'auto))
			"/home/user1/.emacs.d/snippets/org-mode/<bmod" nil nil)
		       ("<bbp" "    # shellcheck disable=SC2034\n    local _STACK z Options=() Input=() $2\n    [[ \"\\$1\" =~ (-h|--help) ]] && {\n	local _DESCRIPTION _EXAMPLE	\n	# shellcheck disable=SC2034\n	_DESCRIPTION=\\$(cat <<'EOF'\n<<$1-description()>>\nEOF\n)\n	# shellcheck disable=SC2034\n	_EXAMPLE=\\$(cat <<'EOF'\n<<$1-example()>>\nEOF\n)\n    }\n\n    # Options\n    local null=(z null \"\" \"Read null-separated input from stdin\" 0)\n    Options+=(\"(\\${null[*]@Q})\")\n\n    # Operands\n    # shellcheck disable=SC2034\n    local -a Operands=(1:t:$2)\n\n    # Parse args\n    # shellcheck disable=SC2034\n    [[ ! -t 0 ]] && mapfile -t -d '' Input\n    setopts \"\\$@\" || { printf '%s' \"Parsing input failed: \\${_STACK}\" && bcu__stack \"\\$@\" && return 1; }\n    [[ \"\\$1\" =~ (-h|--help) ]] && return 0\n    $0" "<bbp" nil nil
			((yas-after-exit-snippet-hook #'org-align-all-tags)
			 (yas-indent-line 'fixed)
			 (yas-wrap-around-region 'nil))
			"/home/user1/.emacs.d/snippets/org-mode/<bbp" nil nil)))


;;; Do not edit! File generated at Wed Oct 13 10:20:09 2021
