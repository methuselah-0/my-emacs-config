* Basic info

#+begin_src emacs-lisp
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))

(if (file-exists-p "/home/user1/.emacs.d/name.txt")
    (let ((a (read-lines "/home/user1/.emacs.d/name.txt")))
      (let
	  ((name (car a))
	   (email (cadr a)))
	(setq user-full-name name)
	(setq user-mail-address email))))
#+end_src

https://emacs-guix.gitlab.io/website/manual/latest/emacs-guix.html

#+BEGIN_SRC emacs-lisp
(setq user-full-name "David Larsson")
(setq user-mail-address "david.larsson@selfhosted.xyz")
;; Assuming the Guix checkout is in ~/src/guix.
(if (file-exists-p "~/src/guix/etc/copyright.el")
    (load-file "~/src/guix/etc/copyright.el"))
;;(load-file "~/src/guix/etc/copyright.el")
(require 'guix-autoloads nil t)
#+END_SRC

* Guix

#+BEGIN_SRC emacs-lisp
;; Assuming the Guix checkout is in ~/src/guix.
(with-eval-after-load 'geiser-guile
   (add-to-list 'geiser-guile-load-path "~/src/guix"))
;; Assuming the Guix checkout is in ~/src/guix.
(with-eval-after-load 'yasnippet
  (add-to-list 'yas-snippet-dirs "~/src/guix/etc/snippets"))
#+END_SRC

* Package repos, load paths etc.

(load "init.el")
ref https://github.com/itscaleb/emacs.d/blob/master/readme.org

;;  (setf custom-file "~/.emacs.d/emacs-custom.el")
;;  (load custom-file t)

In many cases you would need =(require 'myplugin)= instead of load:

Directory for installing and loading individual lisp-extensions:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp-files/")
#+END_SRC

(add-to-list 'load-path "~/bin/webkit_emacs/")
;(load "webkit.el")

This subdir loading doesn't work :/

#+BEGIN_SRC emacs-lisp
(progn (cd "~/.emacs.d/elisp-files/")
              (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

For MELPA elisp packages from http://melpa.milkbox.net/#/getting-started

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
;;(package-initialize) ;; got warning that it's an unnecessary call to this function.
;;   ;;(require 'package)
;;   (add-to-list 'package-archives
;; 	       '("melpa" . "https://melpa.org/packages/")
;; 	       '("org" . "https://orgmode.org/elpa/")
;; 	       )
;;   (when (< emacs-major-version 24)
;;     ;; For important compatibility libraries like cl-lib
;;     (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
;; ;;  (require 'org-tempo)
;; ;;  (load 'org-tempo)
#+END_SRC

Note potential conflict with company-mode, see [[https://github.com/joaotavora/yasnippet/issues/708][this issue]].

For the ~yas-inhibit-overlay-modification-protection~ part, see [[https://github.com/joaotavora/yasnippet/commit/fc33b2fbaee6c514c91e80f5b1c0210c776b03ed][this
link]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
	     "~/.emacs.d/plugins/yasnippet")
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
	;;        "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
	;;        "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
	))
(yas-global-mode 1)
(require 'yasnippet)
(yas-global-mode 1)
;;(define-key yas-minor-mode-map [(tab)] nil)
;;(define-key yas-minor-mode-map (kbd "TAB") nil)
(setq yas-inhibit-overlay-modification-protection t)
#+END_SRC


* Layout, startup etc.

This only works in GUI mode

#+BEGIN_SRC emacs-lisp
;;(setq initial-major-mode 'fundamental-mode)
(setq vc-follow-symlinks nil)
(add-hook 'window-setup-hook (lambda () (delete-window (select-window (get-buffer-window "*scratch*")))))
(setq inhibit-startup-screen t
      ;;initial-buffer-choice nil
)

(put 'upcase-region 'disabled nil)
(setq org-support-shift-select t)
(global-set-key (kbd "C-x C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-x C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x C-<down>") 'shrink-window)
(global-set-key (kbd "C-x C-<up>") 'enlarge-window)
#+END_SRC

Disable the menubar with menu-bar-mode 0. Menu bar is the File, Edit,
Options, Buffers, Tools, Emacs-Lisp, Help. You can always toggle
(switch between on or off) with this command M-x menu-bar-mode or F10.

arg >= 1 enables the menu bar. 

=(scroll-bar-mode -1)= to disable buffer scroll bars

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Enable global-tab-line-mode which displays tab right under the
menubar:

#+begin_src emacs-lisp
(global-tab-line-mode)
#+end_src

Show line-numbers in all buffers:

#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+end_src

* Possibly Old stuff

Weechat sucks so won't use =(require 'weechat)= or =(require
'weechat-alert)= anymore.

Alert is used to get alerts! Quack.el I don't know!

#+BEGIN_SRC emacs-lisp
(load "quack.el")
;;(require 'alert)
#+END_SRC

Old: (org-alert weechat-alert weechat pdf-tools syslog-mode nlinum rainbow-delimiters ac-geiser auto-complete-pcmp auto-complete paredit geiser))))

* Custom

custom-set-variables was added by Custom. If you edit it by hand, you
could mess it up, so be careful. Your init file should contain only
one such instance. If there is more than one, they won't work right.

;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.

#+BEGIN_SRC emacs-lisp
  ;; (custom-set-variables
  ;;  '(package-selected-packages
  ;;    (quote
  ;;     (ox-hugo ox-gfm org-alert syslog-mode nlinum rainbow-delimiters ac-geiser auto-complete-pcmp auto-complete paredit geiser))))
  ;; (custom-set-faces)
#+END_SRC

* Media - EMMS
; emms, see: https://www.gnu.org/software/emms/quickstart.html
;(add-to-list 'load-path "~/.emacs.d/elisp-files/emms/")
;(require 'emms-setup)
;(emms-standard)
;(emms-default-players)

; emms-player-mpd, see https://github.com/alezost/emms-player-mpv
;(add-to-list 'load-path "~/.emacs.d/elisp-files/emms-player-mpv/")
;(require 'emms-player-mpv)
;(add-to-list 'emms-player-list 'emms-player-mpv)

* pdf tools
; pdf-tools specific from https://github.com/politza/pdf-tools/issues/128


#+BEGIN_SRC emacs-lisp
  ;; ;;; Begin Code Here ;;;
  ;; (pdf-tools-install) ;;for view pdfs
  ;; (load "pdf-tools") ;;for spooling to pdf.

  ;; (setq TeX-view-program-selection '((output-dvi "Evince") ;; This is not necessary
  ;; (output-pdf "PDF Tools") ;; <-- THIS one
  ;; (output-html "xdg-open") ;; This is not necessary
  ;; ))
  ;; (require 'subr-x)
  ;; (defun th/pdf-view-revert-buffer-maybe (file)
  ;; (when-let ((buf (find-buffer-visiting file)))
  ;; (with-current-buffer buf
  ;; (when (derived-mode-p 'pdf-view-mode)
  ;; (pdf-view-revert-buffer nil t)))))

  ;; (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
  ;; #'th/pdf-view-revert-buffer-maybe)
  ;; ;;; END CODE HERE;;;
#+END_SRC

* Programming
** general

browse-at-remote lets you open-in-a-browser the file that is open in
the buffer at the same line number you are currently at - occasionally
easier to see what changes you are doing than invoking ~git diff~, or
just faster to visit the file in the browser if you have already
cloned the repo locally.

#+begin_src emacs-lisp
(require 'browse-at-remote)
(global-set-key (kbd "C-c g g") 'browse-at-remote)
#+end_src

** Geiser

#+begin_src emacs-lisp :session test
;;(with-eval-after-load 'geiser-guile
;;  (add-to-list 'geiser-guile-load-path "~/src/code_guile/random_git_repo"))
(require 'ac-geiser)
(add-hook 'geiser-mode-hook 'ac-geiser-setup)
(add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
(eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'geiser-repl-mode))
#+end_src

** flycheck / flymake

#+begin_src emacs-lisp
(add-hook 'sh-mode-hook '(lambda () (flycheck-mode)))
#+end_src

** Perl

;(add-to-list 'load-path "~/.emacs.d/pde/")
;(load "pde-load")

** Paredit.

Automatically enable it with emacs lisp modes. From
https://www.emacswiki.org/emacs/ParEdit

#+BEGIN_SRC emacs-lisp
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC

** Python

*** fix indent-offset error thing 

"Can't guess python-indent-offset, using defaults: 4". is an annoying
warning. You can make it go away with:

#+begin_src emacs-lisp
(setq python-indent-guess-indent-offset nil)
#+end_src

*** jupyter-mode

By running =Alt-i= when the marker is on some code that's been
interpreted by the kernel you get the python kernel information about
it, such as signature, docstring, file and type.

#+begin_src emacs-lisp
(setq ob-ipython-command "/home/user1/.guix-profile/bin/jupyter")
;;(require 'company-jupyter)
;;(require 'company-jedi)
;;(require 'ob-ipython)
;;(add-to-list 'company-backends 'company-jupyter)
;;(add-to-list 'company-backends 'company-ob-ipython)
#+end_src


https://github.com/tmurph/jupyter-mode

#+begin_src emacs-lisp
;;(require 'jupyter)
;;(require 'ob-jupyter)
;;(add-to-list 'org-src-lang-modes '("jupyter" . fundamental))

;;(require 'company-jupyter)
;;(add-to-list 'company-backends 'company-jupyter)
#+end_src

*** ein

Instead try ein:

#+begin_src emacs-lisp
;(jedi-setup)

;;(require 'ein)
;;(require 'ein-loaddefs)
;;(require 'ein-notebook)
;;(require 'ein-subpackages)
;;(setq
;;;;ein:jupyter-default-server-command "/home/wyousef/Downloads/AAProgramsAA/anaconda3/envs/MyDefaultEnv/bin/jupyter"
;;;;ein:jupyter-default-notebook-directory "/home/wyousef/Downloads/ZZPythonTryingZZ/code"
;;ein:completion-backend 'ein:use-ac-jedi-backend
;;)
#+end_src

or try ob-ipython

*** org-export to ipynb: ox-ipynb

And export to jupyter:

#+begin_src emacs-lisp
(require 'ox-ipynb)
#+end_src

*** flymake-python-pyflakes and eldoc

You must go to your project directory and run ~pylint
--generate-rcfile > .pylintrc~, then fix the ~init-hook~ line like
this: ~init-hook='import sys; sys.path.append("<path to folder your
module is in>")'~

#+begin_src emacs-lisp
(global-flycheck-mode 1)
(with-eval-after-load 'flycheck (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
#+end_src

**** old flymake related setup

Usage:

  (require 'flymake-python-pyflakes)
  (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)

To use "flake8" instead of "pyflakes", add this line:

  (setq flymake-python-pyflakes-executable "flake8")

You can pass extra arguments to the checker program by customizing
the variable `flymake-python-pyflakes-extra-arguments', or setting it
directly, e.g.

  (setq flymake-python-pyflakes-extra-arguments '("--ignore=W806"))

Uses flymake-easy, from https://github.com/purcell/flymake-easy


Requires to install rope-read-mode from melpa.

#+begin_src emacs-lisp
  ;; (defun rope-eldoc-function ()
  ;;   (interactive)
  ;;   (let* ((win-conf (current-window-configuration))
  ;;          (resize-mini-windows nil)
  ;;          (disable-python-trace t)
  ;;          class fun args result-type
  ;;          (flymake-message (python-flymake-show-help))
  ;;          (initial-point (point))
  ;;          (paren-range (let (tmp)
  ;;                         (ignore-errors
  ;;                           (setq tmp (vimpulse-paren-range 0 ?\( nil t))
  ;;                           (if (and tmp (>= (point) (car tmp)) (<= (point) (cadr tmp)))
  ;;                               tmp
  ;;                             nil))))
  ;;          (result (save-excursion
  ;;                    ;; check if we on the border of args list - lparen or rparen
  ;;                    (if paren-range
  ;;                        (goto-char (car paren-range)))
  ;;                    (call-interactively 'rope-show-doc)
  ;;                    (set-buffer "*rope-pydoc*")
  ;;                    (goto-char (point-min))
  ;;                    (if (or (equal (point-max) 1)
  ;;                            (not (re-search-forward "\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)(.*):" (point-at-eol) t))
  ;;                            (and (current-message) (string-match-p "BadIdentifierError" (current-message))))
  ;;                        nil
  ;;                      (let (result)
  ;;                        ;; check if this is class definition
  ;;                        (if (looking-at "class \\([a-zA-Z_]+[a-zA-Z0-9_]*\\)(.*):")
  ;;                            (progn
  ;;                              (goto-char (point-at-eol))
  ;;                              (re-search-forward (buffer-substring (match-beginning 1) (match-end 1)))))
  ;;                        (goto-char (point-at-bol))
  ;;                        (setq result (buffer-substring (point) (point-at-eol)))

  ;;                        ;; check if exist better description of function
  ;;                        (goto-char (point-at-eol))
  ;;                        (string-match "\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)(.*)" result) ;get function name
  ;;                        (if (re-search-forward (concat (match-string 1 result) "(.*)") nil t)
  ;;                            (progn
  ;;                              (goto-char (point-at-bol))
  ;;                              (setq result (buffer-substring (point) (point-at-eol)))))

  ;;                        ;; return result
  ;;                        result
  ;;                        ))))
  ;;          (arg-position (save-excursion
  ;;                          (if paren-range
  ;;                              (count-matches "," (car paren-range) (point))))))
  ;;     ;; save window configuration
  ;;     (set-window-configuration win-conf)
  ;;     ;; process main result
  ;;     (if result
  ;;         (progn
  ;;           (setq result-type (nth 1 (split-string result "->")))
  ;;           (setq result (nth 0 (split-string result "->")))
  ;;           (setq result (split-string result "("))
  ;;           (setq fun (nth 1 (split-string (nth 0 result) "\\.")))
  ;;           (setq class (nth 0 (split-string (nth 0 result) "\\.")))
  ;;           ;; process args - highlight current function argument
  ;;           (setq args (nth 0 (split-string (nth 1 result) ")")))

  ;;           ;; highlight current argument
  ;;           (if args
  ;;               (progn
  ;;                 (setq args (split-string args ","))
  ;;                 (setq args (let ((num -1))
  ;;                              (mapconcat
  ;;                               (lambda(x)(progn
  ;;                                           (setq num (+ 1 num))
  ;;                                           (if (equal num arg-position) (propertize x 'face 'eldoc-highlight-function-argument) x)))
  ;;                               args
  ;;                               ",")))))

  ;;           ;; create string for type signature
  ;;           (setq result
  ;;                 (concat
  ;;                  (propertize "Signature: " 'face 'flymake-message-face)

  ;;                  (if fun
  ;;                      (concat (propertize (org-trim class) 'face 'font-lock-type-face)
  ;;                              "."
  ;;                              (propertize (org-trim fun) 'face 'font-lock-function-name-face))
  ;;                    (propertize (org-trim class) 'face 'font-lock-function-name-face))

  ;;                  " (" args ")"

  ;;                  (if result-type
  ;;                      (concat " -> " (org-trim result-type)))
  ;;                  ))))

  ;;     ;; create final result
  ;;     (if (and (null flymake-message) (null result))
  ;;         nil
  ;;       (concat flymake-message
  ;;               (if (and result flymake-message) "\n")
  ;;               result))))

  ;; (defvar disable-python-trace nil)

  ;; (defadvice message(around message-disable-python-trace activate)
  ;;   (if disable-python-trace
  ;;       t
  ;;     ad-do-it))

  ;; (defface flymake-message-face
  ;;   '((((class color) (background light)) (:foreground "#b2dfff"))
  ;;     (((class color) (background dark))  (:foreground "#b2dfff")))
  ;;   "Flymake message face")

  ;; (defun python-flymake-show-help ()
  ;;   (when (get-char-property (point) 'flymake-overlay)
  ;;     (let ((help (get-char-property (point) 'help-echo)))
  ;;       (if help
  ;;           (format (concat (propertize "Error: " 'face 'flymake-message-face) "%s") help)))))
  ;; ;; to enable
  ;; (set (make-local-variable 'eldoc-documentation-function) 'rope-eldoc-function)
  ;; (require 'flymake-python-pyflakes)
  ;; (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
  ;; (setq flymake-python-pyflakes-executable "flake8")
#+end_src

*** jedi.el

Note that you can run =M-x jedi:setup= in a regular org-buffer to
enable jedi autocompletion.

You can't use --sys-path <file-dir> to jedi-mode startup any more,
this is deprecated from the jedi api Script class. Maybe worked
earlier. Instead make your python code into a package by for example,
adding an =/my-project/my-lib/{mylib.py,__init__.py} files= in a
directory and import it with =from mylib.mylib import *=.

Fixed line 142 in jediepcserver.py from using the deprecated
completions() to complete(): should look like: **self.kwargs).complete()

#+begin_src emacs-lisp
;;(setq jedi:server-command '("/home/user1/.emacs.d/elpa/jedi-core-20210503.1315/jediepcserver.py"))
(setq jedi:server-args
       '("--log-traceback" "--log=/tmp/pyepc.log"
))
;;(setq jedi:complete-on-dot t)                 ; optional
(add-hook 'python-mode-hook 'jedi:setup)
(eval-after-load "python"
  '(define-key python-mode-map "\C-cx" 'jedi-direx:pop-to-buffer))
(add-hook 'jedi-mode-hook 'jedi-direx:setup)
#+end_src

Also start jedi-mode when in org-mode files. Create a hook to restore
the org-time-stamp binding of ~C-c .~.

#+begin_src emacs-lisp
;;(add-hook 'org-mode-hook 'my-jedi-server-setup)
(add-hook 'org-mode-hook 'jedi:setup)
;;(require 'magit-org-todos) ;; conflicts with magit-todos-mode
(magit-todos-mode)
;; (magit-add-section-hook
;; 'magit-status-sections-hook
;; 'magit-org-todos-insert-org-todos
;; 'magit-insert-staged-changes
;; t)
(define-key org-mode-map (kbd "C-c d") 'completion-help-at-point)
;;(add-hook 'python-mode-hook '(lambda () (define-key python-mode-map (kbd "C-c d") 'jedi:goto-definition )))
;;(add-hook 'python-mode-hook '(lambda () (define-key python-mode-map (kbd "C-c d") 'completion-help-at-point )))
(add-hook 'org-mode-hook '(lambda () (define-key org-mode-map (kbd "C-c .") 'org-time-stamp)))
#+end_src

**** old setup info

#+begin_src emacs-lisp
;;"--sys-path-append=/home/user1/src/code_python/ipstocidrdir"

;;(defun my-jedi-server-setup ()
;;  (let* ((filedir
;;	  (if (string-match "\*Org Src" (buffer-name (current-buffer)))
;;	      (file-name-directory (buffer-file-name (org-src-source-buffer)))
;;	    (file-name-directory (buffer-file-name (current-buffer)))))
;;	 (args (list "--sys-path" filedir))
;;	 )
;;    (set (make-local-variable 'jedi:server-args) args)))
;;(add-hook 'python-mode-hook 'my-jedi-server-setup)

;; (setq jedi:server-args
;;        '("--sys-path" "/home/user1/src/code_python/ipstocidrdir"))
;; (defun my-jedi-server-setup ()
;;   (let* ((filedir
;; 	    (if (string-match "\*Org Src" (buffer-name (current-buffer)))
;; 		(let* (
;; 		       (fnd-arg (buffer-file-name (org-src-source-buffer)))
;; 		       )
;; 		  (if (stringp fnd-arg)
;; 		      (file-name-directory (buffer-file-name (org-src-source-buffer)))
;; 		    ""
;; 		    ))
;; 	      (let
;; 		  ((fnd-arg (buffer-file-name (current-buffer))))
;; 		(if (stringp fnd-arg)
;; 		    (file-name-directory fnd-arg)
;; 		  ""
;; 		  ))
;; 	      ))
;; 	   (args (list "--sys-path" filedir))
;; 	   )
;;     (if (string-match ".+" filedir)
;; 	  ;;(set (make-local-variable 'jedi:server-args) (add-to-list 'args "/home/user1/.guix-profile/lib/python3.8")))))
;; 	  (set (make-local-variable 'jedi:server-args) args))))
;;   (add-hook 'python-mode-hook 'my-jedi-server-setup)
;;(setq jedi:complete-on-dot t)                 ; optional
#+end_src

** php

See under PHP Support [[https://www.emacswiki.org/emacs/ElDoc][here]].

#+begin_src emacs-lisp
(require 'xml)

(setq my-php-function-doc-hash (make-hash-table :test 'equal))


(defun my-php-fetch-function-doc (function)
  (let ((doc (gethash function my-php-function-doc-hash 'nope)))
    (when (eq doc 'nope)
      (setq doc nil)

      (let ((buf (url-retrieve-synchronously (concat "http://php.net/manual-lookup.php?pattern=" function))))
        (with-current-buffer buf
          (goto-char (point-min))
          (let (desc)
            (when (re-search-forward "<div class=\"methodsynopsis dc-description\">\\(\\(.\\|\n\\)*?\\)</div>" nil t)
              (setq desc
                    (replace-regexp-in-string
                     " +" " "
                     (replace-regexp-in-string
                      "\n" ""
                      (replace-regexp-in-string "<.*?>" "" (match-string-no-properties 1)))))
              
              (when (re-search-forward "<p class=\"para rdfs-comment\">\\(\\(.\\|\n\\)*?\\)</p>" nil t)
                (setq desc
                      (concat desc "\n\n"
                              (replace-regexp-in-string
                               " +" " "
                               (replace-regexp-in-string
                                "\n" ""
                                (replace-regexp-in-string "<.*?>" "" (match-string-no-properties 1))))))))

            (if desc
                (setq doc (xml-substitute-special desc)))))

        (kill-buffer buf))

      (puthash function doc my-php-function-doc-hash))

    doc))


(defun my-php-eldoc-function ()
  (let ((symbol (thing-at-point 'symbol)))
    (if (and symbol
             (not (eq (elt symbol 0) ?$)))
        (my-php-fetch-function-doc symbol))))
#+end_src

** emacs-lisp

*** ielm mode and auto-complete

See [[https://emacs.stackexchange.com/questions/30778/emacs-elisp-code-autocompletion-in-emacs-lisp-mode][here]].

#+begin_src emacs-lisp
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
   '(add-to-list 'ac-modes 'slime-repl-mode 'emacs-lisp-mode))

(defun ielm-auto-complete ()
  "Enables `auto-complete' support in \\[ielm]."
  (setq ac-sources '(ac-source-functions
                     ac-source-variables
                     ac-source-features
                     ac-source-symbols
                     ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  (auto-complete-mode 1))
(add-hook 'ielm-mode-hook 'ielm-auto-complete)

(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))

(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))
(add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
#+end_src

*** contextual-help-mode

See [[https://www.emacswiki.org/emacs/ElDoc][here]].

#+begin_src emacs-lisp
(define-minor-mode my-contextual-help-mode
  "Show help for the elisp symbol at point in the current *Help* buffer.

  Advises `eldoc-print-current-symbol-info'."
  :lighter " C-h"
  :global t
  (require 'help-mode) ;; for `help-xref-interned'
  (when (eq this-command 'my-contextual-help-mode)
    (message "Contextual help is %s" (if my-contextual-help-mode "on" "off")))
  (and my-contextual-help-mode
       (eldoc-mode 1)
       (if (fboundp 'eldoc-current-symbol)
	   (eldoc-current-symbol)
	 (elisp--current-symbol))
       (my-contextual-help :force)))

  (defadvice eldoc-print-current-symbol-info (before my-contextual-help activate)
    "Triggers contextual elisp *Help*. Enabled by `my-contextual-help-mode'."
    (and my-contextual-help-mode
	 (derived-mode-p 'emacs-lisp-mode)
	 (my-contextual-help)))

  (defvar-local my-contextual-help-last-symbol nil
    ;; Using a buffer-local variable for this means that we can't
    ;; trigger changes to the help buffer simply by switching windows,
    ;; which seems generally preferable to the alternative.
    "The last symbol processed by `my-contextual-help' in this buffer.")

  (defun my-contextual-help (&optional force)
    "Describe function, variable, or face at point, if *Help* buffer is visible."
    (let ((help-visible-p (get-buffer-window (help-buffer))))
      (when (or help-visible-p force)
	(let ((sym (if (fboundp 'eldoc-current-symbol)
		       (eldoc-current-symbol)
		     (elisp--current-symbol))))
	  ;; We ignore keyword symbols, as their help is redundant.
	  ;; If something else changes the help buffer contents, ensure we
	  ;; don't immediately revert back to the current symbol's help.
	  (and (not (keywordp sym))
	       (or (not (eq sym my-contextual-help-last-symbol))
		   (and force (not help-visible-p)))
	       (setq my-contextual-help-last-symbol sym)
	       sym
	       (save-selected-window
		 (help-xref-interned sym)))))))

  (defun my-contextual-help-toggle ()
    "Intelligently enable or disable `my-contextual-help-mode'."
    (interactive)
    (if (get-buffer-window (help-buffer))
	(my-contextual-help-mode 'toggle)
      (my-contextual-help-mode 1)))

  (my-contextual-help-mode 1)

(global-set-key (kbd "C-c h") #'my-contextual-help-toggle)
#+end_src

#+RESULTS:
: my-contextual-help-toggle


** Auto-Complete

Dirty fix for having AC everywhere. Disable to not interfere with Jedi
Autocomplete.

#+BEGIN_SRC emacs-lisp
;; (define-globalized-minor-mode real-global-auto-complete-mode
;;   auto-complete-mode (lambda ()
;; 		       (if (not (minibufferp (current-buffer)))
;; 			   (auto-complete-mode 1))))
;; (real-global-auto-complete-mode t)
#+END_SRC

Geiser-AC. Automatically enable ac-geiser.

#+BEGIN_SRC emacs-lisp
(require 'ac-geiser)
(add-hook 'geiser-mode-hook 'ac-geiser-setup)
(add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
(eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'geiser-repl-mode))
#+END_SRC

;(define-key geiser-repl-mode-keymap (kbd "C-.") 'geiser-doc-symbol-at-point)
;(define-key geiser-mode-keymap (kbd "C-,") nil)

** Javascript

With xref-js2 you can use ~M-.~ to jump to definition, =M-=, to jump
back, and ~M-?~ to find references.

You can also use ~M-x RET tern-show-docs~ etc.

U should add export
=PATH=~/src/my-emacs-config/node_modules/tern/bin:"$PATH"= before
starting emacs, to ensure the tern-server auto-starts when visiting
.js files.

Make sure to define a .tern-project file in your projects. See
[[https://ternjs.net/doc/manual.html#configuration][configuration]] in the docs.

js2-mode https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html
company & tern mode: https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html
old: https://truongtx.me/2014/04/20/emacs-javascript-completion-and-refactoring

#+BEGIN_SRC emacs-lisp
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

(require 'company-tern)

(add-to-list 'company-backends 'company-tern)
(add-hook 'js2-mode-hook (lambda ()
			   (tern-mode)
			   (company-mode)))

;; Disable completion keybindings, as we use xref-js2 instead
(define-key tern-mode-keymap (kbd "M-.") nil)
(define-key tern-mode-keymap (kbd "M-,") nil)

(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(eval-after-load 'tern
  '(progn
     (require 'tern-auto-complete)
           (tern-ac-setup)))
(defun delete-tern-process ()
  (interactive)
  (delete-process "Tern"))

;;(add-hook 'js2-mode-hook 'ac-js2-setup-auto-complete-mode)
;;(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
;;(setq ac-js2-evaluate-calls t)
#+END_SRC

* Org-mode

This hook updates the org-mode buffer if the file has changed from
outside of org-mode. This is useful if for example you would update an
org-mode agenda file via say ical2org script/cronjob:

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-revert-mode)
#+end_src

** Variables

[[https://emacs.stackexchange.com/a/46043/28784][Reference]]

Orgmode's export function copies the buffer content to a new buffer
and evaluates the source blocks in the new buffer. Thereby only buffer
local variables with prefixes org- and orgtbl- are copied from the
original buffer to the new one.

That means you need to prefix your buffer local variables with org- or
orgtbl-.

In order to avoid clashes between org variables and your own buffer
local variables I suggest to use some unique id at the second position
of the name, e.g., org-my-....

I did not find a simple inline substitution of local variables by
their evaluation result. The closest one gets is inline source code
src_emacs-lisp[:var baz=org-my-foo]{baz}. The problem is that the
:exports header argument does not work for inline source code. So you
cannot suppress the source code.

For that reason I defined a new eval: link type with the following
elisp code.

#+begin_src emacs-lisp
(defun my-org-link-eval (path &rest _rest)
  "Evaluate PATH and return result as string."
  (condition-case err
      (prin1-to-string (eval (read path)))
    (error (format "Error in eval of %S: %S." path err))))

(defun my-org-link-eval-activate (start end path bracketp)
  "Display text from START to END as result of the eval of PATH.
BRACKETP is ignored."
  (save-excursion
    (if org-descriptive-links
      (add-text-properties
       start end
       (list 'display (propertize (my-org-link-eval path) 'face 'org-link)))
      (remove-text-properties start end '(display nil)))))

(org-link-set-parameters "val"
             :export #'my-org-link-eval
             :activate-func #'my-org-link-eval-activate)
#+end_src

If you install that code in your init file and restart emacs you can
use the following org file as a demo for all your contexts.

Context 1:
#+begin_example
,* First Section
is about [[val:org-my-foo]]
#+end_example

#+begin_example
Context 2:

#+BEGIN_SRC python :var baz=(prin1-to-string org-my-foo) :exports results
return(baz)
#+END_SRC

#+RESULTS:
: bar
#+end_example

#+begin_example
Context 3:

| Numbers | NumbersMultipliedBy2 |
|---------+----------------------|
|      32 |                   64 |
#+TBLFM: $1='(prin1-to-string org-my-aNumber)::$2=@2$1 * 2
#+end_example

#+begin_example
# Local Variables:                                             
# mode: org
# org-my-foo: bar
# org-my-aNumber: 32                                                     
# End:
#+end_example

With descriptive links activated [[eval:org-my-foo]] is displayed as
bar. Independently of the display the link always exports to bar.

The header argument :var baz=(prin1-to-string org-my-foo) of the
python source block evaluates org-my-foo in the course of function
argument evaluation and formats the resulting value as string. The
resulting string is assigned to the python variable baz.

The '(prin1-to-string org-my-aNumber) in the table formula evaluates
the lisp form (prin1-to-string org-my-aNumber) in the same way as in
the previous paragraph.

** Key-bindings

The kbd version below is because the \C-cl version doesn't work.

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
;; https://orgmode.org/manual/Activation.html#Activation
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** todo-keywords setup

Org-mode todo - custom keywords instead of just TODO and DONE.

=Ctrl-c Ctrl-t= to select a new keyword for a header from list of
keywords. ~@~ is for note, ~!~ is for timestamp and the letter is for
the key used to select the TODO-item in question.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "PROPOSED(p@/!)" "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d)")
	      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+END_SRC

Define their colors

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
	      ("PROPOSED" :foreground "yellow" :weight bold)
	      ("STARTED" :foreground "orange" :weight bold)
	      ("NEXT" :foreground "blue" :weight bold)
	      ("DONE" :foreground "forest green" :weight bold)
	      ("WAITING" :foreground "orange" :weight bold)
	      ("HOLD" :foreground "magenta" :weight bold)
	      ("CANCELLED" :foreground "forest green" :weight bold)
	      ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC

Then we need to write the keywords to a file to be nice to the
org-schedule script that uses them:

#+begin_src emacs-lisp
(defun write-string-to-file (string file)
  ;;(interactive "sEnter the string: \nFFile to save to: ")
  (with-temp-buffer
    (insert string)
    (when (file-writable-p file)
      (write-region (point-min)
                    (point-max)
                    file))))
#+end_src

#+RESULTS:
: write-string-to-file

The keywords should be written to file when org-mode is initialized:

#+begin_src emacs-lisp
(defun todo-keywords-to-file()
  (write-string-to-file (mapconcat 'identity (mapcar 'car org-todo-keyword-faces) "\n") "~/.emacs.d/todokeywords.txt"))
(add-hook 'org-mode-hook 'todo-keywords-to-file)
#+end_src

#+RESULTS:


You can also set these by:

#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
#+END_SRC


** Archiving
Org-mode archive - function/command to archive done tasks in a subtree

#+BEGIN_SRC emacs-lisp
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))
#+END_SRC

;; Org-mode-AC. From https://github.com/aki2o/org-ac
;(require 'org-ac)
;; Make config suit for you. About the config item, eval the following sexp.
;(customize-group "org-ac")
;(org-ac/config-default)

; Org-pdfview, load automatically and configure the org-mode default open PDF file function.
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org '(require 'org-pdfview))
#+END_SRC
;(add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))

** Alert

Org-mode alert

#+BEGIN_SRC emacs-lisp
(require 'org-alert)
(setq org-alert-enable t)
(setq alert-default-style 'libnotify)
(setq org-alert-interval 300)
(setq alert-fade-time 150)
#+END_SRC

** Calendar

#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/.emacs.d/caldav-conf.el")
    (load-file "~/.emacs.d/caldav-conf.el"))
#+END_SRC

** Agenda

Org-Mode agenda

#+BEGIN_SRC emacs-lisp
;;'(org-agenda-files (quote ("~/org/notes.org" "~/org/work.org" "~/org/home.org")))
(setq org-agenda-files (list "~/org/work.org"
			     "~/org/notes.org"
			     "~/org/home.org"
			     "~/org/fromhome.org"))
;;(add-hook 'after-init-hook 'org-agenda-list)
#+END_SRC

#+RESULTS:
| ~/org/work.org | ~/org/notes.org | ~/org/home.org | ~/org/fromhome.org |

** Contacts

Org-mode contacts

#+BEGIN_SRC emacs-lisp
;;(require 'org-contacts)
;;(setq org-contacts-files '("~/org/contacts.org"))
;; (add-to-list 'org-capture-templates
;; '("c" "Contacts" entry (file "~/org/contacts.org")
;;   "* %(org-contacts-template-name)
;; :PROPERTIES:
;; :EMAIL: %(org-contacts-template-email)
;; :END:"))
#+END_SRC

#+RESULTS:

** Clock-table

Org-mode clock-table

https://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time

Clock in with =C-c C-x C-i= and clock out with =C-c C-x C-o=.

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(define-key org-mode-map (kbd "C-c C-x C-i") 'org-clock-in)
;; For clocktable reports in the org-file itself
(setq org-clock-clocktable-default-properties '(:maxlevel 10 :block thisweek :link f :formula % :scope agenda-with-archives :step day :properties ("Prio") :stepskip0)) ;; https://orgmode.org/manual/The-clock-table.html and https://emacs.stackexchange.com/questions/3166/clock-table-details-in-org-mode
;; For clocktable report in Agenda-view
(setq org-agenda-clockreport-parameter-plist (quote
					      (:lang "se" :maxlevel 6 :fileskip0 t
                                                     :properties ("Prio")
                                                     :indent t :narrow 80!)))
#+END_SRC

** Babel

*** org-src indentation

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

*** Languages

[[https://github.com/dzop/emacs-jupyter#overriding-built-in-src-block-languages][override python with jupyter-python]]

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (ein . t)
   (dot . t)
   (latex . t)
   (shell . t)
   ;;(ipython . t)
   (jupyter . t)))
(setq org-confirm-babel-evaluate nil)
(org-babel-jupyter-override-src-block "python")
#+END_SRC

** Alists

;; ref https://emacs.stackexchange.com/questions/12841/quickly-insert-source-blocks-in-org-mode

Below is all outdated because I'm using yasnippet instead.

Alist templates were updated with org-mode 9.2 so for now we need to
get the old template version back with =(require 'org-tempo)=.

Add header drawer with =<nhTAB=


#+BEGIN_SRC emacs-lisp
;; (require 'org-tempo)
;; (load 'org-tempo)
;; (defun tempo-use-tag-list (tag-list &optional completion-function)
;;   "Install TAG-LIST to be used for template completion in the current buffer.
;; TAG-LIST is a symbol whose variable value is a tag list created with
;; `tempo-add-tag'.

;; COMPLETION-FUNCTION is an obsolete option for specifyingis an optional
;; function or string that is used by `\\[tempo-complete-tag]' to find a
;; string to match the tag against. It has the same definition as the
;; variable `tempo-match-finder'. In this version, supplying a
;; COMPLETION-FUNCTION just sets `tempo-match-finder' locally."
;;   (let ((old (assq tag-list tempo-local-tags)))
;;     (if old
;; 	(setcdr old completion-function)
;;       (setq tempo-local-tags (cons (cons tag-list completion-function)
;; 				   tempo-local-tags))))
;;   (if completion-function
;;       (setq tempo-match-finder completion-function))
;;   (tempo-invalidate-collection))
#+END_SRC

#+RESULTS:
: org-tempo

#+BEGIN_SRC emacs-lisp
;; (tempo-define-template "foo"
;; 			 ;; template name
;; 		       '("System.out.println(\"foo\");")
;; 		       "f"
;; 		       )

;; (add-to-list 'org-structure-template-alist '("n" "#+NAME: ?"))
;; (add-to-list 'org-structure-template-alist '("hp" ":PROPERTIES:\n:header-args: ?\n:END:"))
;; (add-to-list 'org-structure-template-alist
;; 	       '("ns" "#+NAME: ?\n#+BEGIN_SRC \n\n#+END_SRC"))
#+END_SRC

Add language source blocks with =<s= plus first letter of language, so
for example bash would be added with =<sbTAB= and look like:

System.out.println("foo");

System.out.println("foo");



#+BEGIN_EXAMPLE
#+BEGIN_SRC bash
<cursor lands here>
#+END_SRC
#+END_EXAMPLE

For named source blocks you do the same but with =<nsbTAB= and so for
example bash would look like:

#+BEGIN_EXAMPLE
#+NAME: <cursor lands here>
#+BEGIN_SRC bash

#+END_SRC
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-structure-template-alist
;; 	     '("sb" "#+BEGIN_SRC bash\n?\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("sc" "#+BEGIN_SRC scheme\n?\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("sd" "#+BEGIN_SRC dot\n?\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("so" "#+BEGIN_SRC org\n?\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("sp" "#+BEGIN_SRC python\n?\n#+END_SRC"))
#+END_SRC

Named ones

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-structure-template-alist
;; 	     '("nsb" "#+NAME: ?\n#+BEGIN_SRC bash\n\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("nsc" "#+NAME: ?\n#+BEGIN_SRC scheme\n\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("nsd" "#+NAME: ?\n#+BEGIN_SRC dot\n\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("nso" "#+NAME: ?\n#+BEGIN_SRC org\n\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("nsp" "#+NAME: ?\n#+BEGIN_SRC python\n\n#+END_SRC"))
#+END_SRC

Html stuff

The latter (below) will embed the html chunk as a block in the
rendered html page-not what you want; the former will export the html
chunk as is in the html file so that that code will be rendered when
the page is displayed-what you want.

;; ref https://stackoverflow.com/questions/9920001/including-literal-html-code-in-org-mode-templates

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-structure-template-alist
;; 	     '("eh" "#+BEGIN_EXPORT HTML\n?\n#+END_EXPORT"))
;; (add-to-list 'org-structure-template-alist
;; 	     '("h" "#+BEGIN_HTML\n?\n#+END_HTML"))
#+END_SRC

** Tangling & Misc

Tangle org files when we save them

#+BEGIN_SRC emacs-lisp
(defun toggle-org-tangle-on-save ()
  (interactive)
  (if (bound-and-true-p org-tangle-on-save)
      (setq-local org-tangle-on-save nil)
    (setq-local org-tangle-on-save t))
  (message (if org-tangle-on-save "Enabled tangling on save" "Disabled tangling on save")))
#+END_SRC

To avoid having =_= be interpreted as subscripts when exporting
org-docs to html.

#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts "{}")
#+END_SRC

Nice to have to not have to use the arrow-keys:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-demote-subtree)
(global-set-key (kbd "C-c r") 'org-promote-subtree)
#+END_SRC

To make automatic tangling work ~C-c C-v C-t~ without being prompted
for specific lisp Implementation

#+begin_src emacs-lisp
(setq geiser-default-implementation 'guile)
#+end_src

#+begin_src emacs-lisp
;;(setq org-src-preserve-indentation t)
#+end_src



* Presentation

https://gitlab.com/oer/org-re-reveal

[[https://github.com/yjwen/org-reveal/#set-the-location-of-revealjs][org-reveal set the local of reveal.js]]

# #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js

#+name: reveal.js
#+begin_src emacs-lisp
;;(setq org-reveal-root "file:///home/user1/.emacs.d/reveal.js")
(require 'org-re-reveal)
;;(require 'org-reveal)
#+end_src

* Background and transparency

** Set a background image

Background image:

#+begin_src emacs-lisp
;; bg image
;; (custom-set-faces
;;       '(default ((t (:stipple nil :background ((image :type jpeg :file "~/18157421_1638024282892677_1528731701955746756_n.jpg") :origin display) :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 101 :width normal :family "misc-fixed")))))
#+end_src

** Transparency 

Note that this doesn't leave the text alone.

#+begin_src emacs-lisp
;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
;;(set-frame-parameter (selected-frame) 'alpha <both>)

;; (set-frame-parameter (selected-frame) 'alpha '(50 . 0))
;; (add-to-list 'default-frame-alist '(alpha . (50 . 0)))
;;  (defun toggle-transparency ()
;;    (interactive)
;;    (let ((alpha (frame-parameter nil 'alpha)))
;;      (set-frame-parameter
;;       nil 'alpha
;;       (if (eql (cond ((numberp alpha) alpha)
;;                      ((numberp (cdr alpha)) (cdr alpha))
;;                      ;; Also handle undocumented (<active> <inactive>) form.
;;                      ((numberp (cadr alpha)) (cadr alpha)))
;;                100)
;;           '(50 . 0) '(100 . 100)))))
;; (global-set-key (kbd "C-c t") 'toggle-transparency)

;; Set transparency of emacs
;; (defun transparency (value)
;;   "Sets the transparency of the frame window. 0=transparent/100=opaque"
;;   (interactive "nTransparency Value 0 - 100 opaque:")
;;   (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

* Backup files

Save the backup files ending with =~= to special directory. This is
nice so it doesn't clog up all directories in the filesystem.

#+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/VirtualHome/MyEmacsBackups"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
;;(setq backup-directory-alist '(("." . "~/VirtualHome/MyEmacsBackups")))
#+END_SRC

* Misc

** real buffers

#+begin_src emacs-lisp
(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether BUFFER is real."
  (let ((buffer-name (buffer-name buffer)))
    (or (and (not (minibufferp))
             (buffer-file-name buffer))
        (string-equal "*scratch*" buffer-name)
        (string-match-p ".~.*~" buffer-name)
        (string-match-p "FILE=/" buffer-name)
        (string-match-p "\*edit-indirect .*\*" buffer-name)
        (string-match-p "\*Org Src .*\*" buffer-name)
        (string-match-p "*eww*" buffer-name))))
#+end_src

** line Numbers

When scrolling the buffer width changes to make room for more numbers
which is annoying, instead just set the size when opening a new
buffer, and of course grow it when more lines are added.

#+begin_src emacs-lisp
(setq display-line-numbers-grow-only t)
(setq display-line-numbers-width-start t)
(column-number-mode)
#+end_src

** treemacs

To create workspaces, we need to download cfrs.el

#+name: download-cfrs.el
#+begin_src bash :session test :eval never
wget -O ~/src/.emacs.d/elisp-files/cfrs.el https://raw.githubusercontent.com/Alexander-Miller/cfrs/master/cfrs.el
#+end_src

which needs emacs-posframe:

#+name: install-emacs-posframe
#+begin_src bash :session test :eval never
guix install emacs-posframe
#+end_src

#+begin_src emacs-lisp
(require 'treemacs)
(all-the-icons-install-fonts)
;; ;;(require 'treemacs-extras)
(treemacs-set-width 34)
;; ;;(treemacs-is-never-other-window t)
(setq treemacs-space-between-root-nodes nil)
(setq treemacs-indentation 2)

(treemacs-follow-mode)
(treemacs-filewatch-mode)
;; (setq treemacs-fringe-indicator-mode 'disabled)

(set-face-attribute 'treemacs-root-face nil
                    :foreground (face-attribute 'default :foreground)
                    :height 1.0
                    :weight 'normal)

(defun aorst/treemacs-ignore (file _)
  (or (s-ends-with? ".elc" file)
      (s-ends-with? ".o" file)
      (s-ends-with? ".a" file)
      (string= file ".svn")))
(add-to-list 'treemacs-ignored-file-predicates #'aorst/treemacs-ignore)

(defvar aorst--treemacs-icon-face
  '(:foreground unspecified
		:background unspecified
		:inherit shadow
		:slant normal
		:weight normal))

;;     (defun aorst/treemacs-expand-all-projects (&optional _)
;;       "Expand all projects."
;;       (interactive)
;;       (save-excursion
;;         (treemacs--forget-last-highlight)
;;         (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
;;           (-when-let (pos (treemacs-project->position project))
;;             (when (eq 'root-node-closed (treemacs-button-get pos :state))
;;               (goto-char pos)
;;               (treemacs--expand-root-node pos)))))
;;       (treemacs--maybe-recenter 'on-distance))
(defun aorst/treemacs-variable-pitch-labels (&rest _)
  (dolist (face '(treemacs-file-face
                  treemacs-root-face
                  treemacs-tags-face
                  treemacs-directory-face
                  treemacs-directory-collapsed-face
                  treemacs-term-node-face
                  treemacs-help-title-face
                  treemacs-help-column-face
                  treemacs-git-added-face
                  treemacs-git-ignored-face
                  treemacs-git-renamed-face
                  treemacs-git-conflict-face
                  treemacs-git-modified-face
                  treemacs-git-unmodified-face
                  treemacs-git-untracked-face
                  treemacs-root-unreadable-face
                  treemacs-root-remote-face
                  treemacs-root-remote-unreadable-face
                  treemacs-root-remote-disconnected-face
                  treemacs-fringe-indicator-face
                  treemacs-on-failure-pulse-face
                  treemacs-on-success-pulse-face))
    (let ((faces (face-attribute face :inherit nil)))
      (set-face-attribute
       face nil :inherit
       `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))

(defun aorst/treemacs-after-init-setup ()
  "Set treemacs theme, open treemacs, and expand all projects."
  (treemacs-load-theme "Atom")
  (setq treemacs-collapse-dirs 0)
  (treemacs)
  (aorst/treemacs-expand-all-projects)
  (windmove-right))
(defun aorst/treemacs-setup-title ()
  (let ((bg (face-attribute 'default :background))
        (fg (face-attribute 'default :foreground)))
    (face-remap-add-relative 'header-line

                             :background bg :foreground fg
                             :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
  (setq header-line-format
        '((:eval
           (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
                  (extra-align (+ (/ (length text) 2) 1))
                  (width (- (/ (window-width) 2) extra-align)))
             (concat (make-string width ?\s) text))))))
(defun aorst/after-treemacs-setup ()
  "Set treemacs buffer common settings."
  (setq tab-width 1
        mode-line-format nil
        line-spacing 5)
  (setq-local scroll-step 1)
  (setq-local scroll-conservatively 10000)
  (set-window-fringes nil 0 0 t)
  (aorst/treemacs-setup-title) ;; not working!
  (aorst/treemacs-variable-pitch-labels))
(defun aorst/treemacs-setup-fringes ()
  "Set treemacs buffer fringes."
  (set-window-fringes nil 0 0 t)

  (aorst/treemacs-variable-pitch-labels))
;;(advice-add #'treemacs-select-window :after #'aorst/treemacs-setup-fringes)
#+end_src

** frame

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(window-divider-mode)
(set-face-attribute 'window-divider nil
		    :foreground (face-attribute
				 'mode-line-inactive :background))
#+end_src

** window title

#+begin_src emacs-lisp
(setq-default frame-title-format '("%b — Emacs"))
#+end_src

** doom theme

From: https://github.com/andreyorst/dotfiles/blob/740d346088ce5a51804724659a895d13ed574f81/.config/emacs/README.org#theme

#+begin_src emacs-lisp
(load-theme 'doom-one t)
(set-face-attribute 'highlight nil
		    :foreground 'unspecified
		    :distant-foreground 'unspecified
		    :background 'unspecified)
;;(doom-themes-enable-bold)
;;(doom-themes-enable-italic)
#+end_src

** making emacs tabs work like in atom

From: https://andreyorst.gitlab.io/posts/2020-05-07-making-emacs-tabs-work-like-in-atom/

#+begin_src emacs-lisp
;;    :hook (after-init . global-tab-line-mode)

(defun tab-line-close-tab (&optional e)
  "Close the selected tab.

If tab is presented in another window, close the tab by using
`bury-buffer` function.  If tab is unique to all existing
windows, kill the buffer with `kill-buffer` function.  Lastly, if
no tabs left in the window, it is deleted with `delete-window`
function."
  (interactive "e")
  (let* ((posnp (event-start e))
         (window (posn-window posnp))
         (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
    (with-selected-window window
      (let ((tab-list (tab-line-tabs-window-buffers))
            (buffer-list (flatten-list
                          (seq-reduce (lambda (list window)
                                        (select-window window t)
                                        (cons (tab-line-tabs-window-buffers) list))
                                      (window-list) nil))))
        (select-window window)
        (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
            (progn
              (if (eq buffer (current-buffer))
                  (bury-buffer)
                (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                (set-window-next-buffers window (delq buffer (window-next-buffers))))
              (unless (cdr tab-list)
                (ignore-errors (delete-window window))))
          (and (kill-buffer buffer)
               (unless (cdr tab-list)
                 (ignore-errors (delete-window window)))))))))

(defcustom tab-line-tab-min-width 10
  "Minimum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defcustom tab-line-tab-max-width 30
  "Maximum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defun aorst/tab-line-name-buffer (buffer &rest _buffers)
  "Create name for tab with padding and truncation.

If buffer name is shorter than `tab-line-tab-max-width' it gets
centered with spaces, otherwise it is truncated, to preserve
equal width for all tabs.  This function also tries to fit as
many tabs in window as possible, so if there are no room for tabs
with maximum width, it calculates new width for each tab and
truncates text if needed.  Minimal width can be set with
`tab-line-tab-min-width' variable."
  (with-current-buffer buffer
    (let* ((window-width (window-width (get-buffer-window)))
           (tab-amount (length (tab-line-tabs-window-buffers)))
           (window-max-tab-width (if (>= (* (+ tab-line-tab-max-width 3) tab-amount) window-width)
                                     (/ window-width tab-amount)
                                   tab-line-tab-max-width))
           (tab-width (- (cond ((> window-max-tab-width tab-line-tab-max-width)
                                tab-line-tab-max-width)
                               ((< window-max-tab-width tab-line-tab-min-width)
                                tab-line-tab-min-width)
                               (t window-max-tab-width))
                         3)) ;; compensation for ' x ' button
           (buffer-name (string-trim (buffer-name)))
           (name-width (length buffer-name)))
      (if (>= name-width tab-width)
          (concat  " " (truncate-string-to-width buffer-name (- tab-width 2)) "…")
        (let* ((padding (make-string (+ (/ (- tab-width name-width) 2) 1) ?\s))
               (buffer-name (concat padding buffer-name)))
          (concat buffer-name (make-string (- tab-width (length buffer-name)) ?\s)))))))

(setq tab-line-close-button-show t
      tab-line-new-button-show nil
      tab-line-separator ""
      tab-line-tab-name-function #'aorst/tab-line-name-buffer
      tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                        'keymap tab-line-right-map
                                        'mouse-face 'tab-line-highlight
                                        'help-echo "Click to scroll right")
      tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                       'keymap tab-line-left-map
                                       'mouse-face 'tab-line-highlight
                                       'help-echo "Click to scroll left")
      tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                        'keymap tab-line-tab-close-map
                                        'mouse-face 'tab-line-close-highlight
                                        'help-echo "Click to close tab"))

(let ((bg (if (facep 'solaire-default-face)
              (face-attribute 'solaire-default-face :background)
            (face-attribute 'default :background)))
      (fg (face-attribute 'default :foreground))
      (base (face-attribute 'mode-line :background))
      (box-width (/ (line-pixel-height) 2)))
  (set-face-attribute 'tab-line nil :background base :foreground fg :height 1.0 :inherit nil :box (list :line-width -1 :color base))
  (set-face-attribute 'tab-line-tab nil :foreground fg :background bg :weight 'normal :inherit nil :box (list :line-width box-width :color bg))
  (set-face-attribute 'tab-line-tab-inactive nil :foreground fg :background base :weight 'normal :inherit nil :box (list :line-width box-width :color base))
  (set-face-attribute 'tab-line-tab-current nil :foreground fg :background bg :weight 'normal :inherit nil :box (list :line-width box-width :color bg)))

(dolist (mode '(ediff-mode
                process-menu-mode
                term-mode
                vterm-mode))
  (add-to-list 'tab-line-exclude-modes mode))
#+end_src

** Comment text keys

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c M-,") 'comment-region)
(global-set-key (kbd "C-c M-.") 'uncomment-region)
#+END_SRC

Set default browser to chromium mainly because it handles reveal.js
slides well, so useful when running export-and-open.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")
#+END_SRC

** Move lines keys

#+BEGIN_SRC emacs-lisp
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
(global-set-key [(meta shift n)]  'move-line-down)
(global-set-key [(meta shift p)]  'move-line-up)
#+END_SRC

#+RESULTS:
: move-line-down

** Emacs as a pager

For emacs as pager, see
https://crowding.github.io/blog/2014/08/16/replace-less-with-emacs/

#+begin_src emacs-lisp
;; (server-start)
;; (unless (getenv "TERM_PROGRAM")
;;   (setenv "TERM" "xterm"))
;; (setenv "PAGER" "emacs-pager")
;; ; There was a weird interaction with Emacs’ builtin M-x man command. I worked around it with:
;; (defadvice man (around reset-pager activate)
;;   "reset PAGER to `less' when getting man pages."
;;   (let ((old (getenv "PAGER")))
;;     (setenv "PAGER" "less")
;;     ad-do-it
;;     (setenv "PAGER" old)))
#+end_src

** scroll bar, menu bar etc

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** treemacs-hooks

#+begin_src emacs-lisp
(defun aorst/real-buffer-setup (&rest _)
  "Wrapper around `set-window-fringes' function."
  (when window-system
    (let* ((window (selected-window))
           (buffer (window-buffer window)))
      (when (aorst/real-buffer-p buffer)
        (set-window-fringes window 8 8 t)
        (when (bound-and-true-p desktop-save-mode)
          (setq desktop-save-buffer t))))))
(add-hook 'buffer-list-update (aorst/real-buffer-setup))
(add-hook 'window-configuration-change (aorst/real-buffer-setup))
(add-hook 'change-major-mode (aorst/real-buffer-setup))
(require 'treemacs-atom-theme)
(add-hook 'treemacs-mode-hook '(lambda ()
  (treemacs-load-theme "Atom")
  (aorst/treemacs-setup-title)
  (aorst/after-treemacs-setup)
  (aorst/treemacs-setup-fringes)))
(add-hook 'org-mode-hook (treemacs))
#+end_src

* Continue here

;; PDF-TOOLS specific from https://github.com/politza/pdf-tools/issues/128
;; this is disabled because it slows down emacs loadtime significantly
;;; BEGIN CODE HERE ;;;
(pdf-tools-install) ;;for view pdfs
(load "pdf-tools") ;;for spooling to pdf.

(setq TeX-view-program-selection '((output-dvi "Evince") ;; This is not necessary
(output-pdf "PDF Tools") ;; <-- THIS one
(output-html "xdg-open") ;; This is not necessary
))

(require 'subr-x)
(defun th/pdf-view-revert-buffer-maybe (file)
(when-let ((buf (find-buffer-visiting file)))
(with-current-buffer buf
(when (derived-mode-p 'pdf-view-mode)
(pdf-view-revert-buffer nil t)))))

(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
#'th/pdf-view-revert-buffer-maybe)
;;; END CODE HERE;;;

;; Paredit. Automatically enable it with emacs lisp modes. From https://www.emacswiki.org/emacs/ParEdit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

;; Geiser-AC. Automatically enable ac-geiser.
(require 'ac-geiser)
(add-hook 'geiser-mode-hook 'ac-geiser-setup)
(add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
(eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'geiser-repl-mode))


;; Org-mode-AC. From https://github.com/aki2o/org-ac
;(require 'org-ac)
;; Make config suit for you. About the config item, eval the following sexp.
;(customize-group "org-ac")
;(org-ac/config-default)

;; Org-pdfview, load automatically and configure the org-mode default open PDF file function.
(eval-after-load 'org '(require 'org-pdfview))
;(add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))

;; https://emacs.stackexchange.com/questions/30778/emacs-elisp-code-autocompletion-in-emacs-lisp-mode
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode 'emacs-lisp-mode))

(defun ielm-auto-complete ()
  "Enables `auto-complete' support in \\[ielm]."
  (setq ac-sources '(ac-source-functions
		     ac-source-variables
		     ac-source-features
		     ac-source-symbols
		     ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  (auto-complete-mode 1))
(add-hook 'ielm-mode-hook 'ielm-auto-complete)

(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))

(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))
(add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)

;(global-linum-mode)
(add-hook 'prog-mode-hook 'nlinum-mode)
(add-hook 'prog-mode-hook 'visual-line-mode)
(require 'pcmpl-args)

* Fixing jedi and jupyter

** jedi-core.el

In jedi-core.el
https://github.com/tkf/emacs-jedi/pull/350

*** jedi:-buffer-file-name

Should look like this so you can get completions from org-babel source buffers:

#+begin_src text
(defun jedi:-buffer-file-name ()
  "Return `buffer-file-name' without text properties.
See: https://github.com/tkf/emacs-jedi/issues/54"
  (substring-no-properties (or (if (string-match "\*Org Src" (buffer-name (current-buffer)))
                                   (buffer-file-name (org-src-source-buffer))
                                 (buffer-file-name))
                               "")))
#+end_src

*** jedi:call-deferred

Specifically in jedi:call-deferred this part should be removed:

#+begin_src: text
  (let ((source      (buffer-substring-no-properties (point-min) (point-max)))
        (source-path (jedi:-buffer-file-name))
        ;; line=0 is an error for jedi, but is possible for empty buffers.
        (line        (max 1 (count-lines (point-min) (min (1+ (point)) (point-max)))))
        (column      (- (point) (line-beginning-position))))
    (epc:call-deferred (jedi:get-epc)
                       method-name
                       (list source line column source-path))))
#+end_src

and replaced with:

#+begin_src text
 (with-current-buffer (if (string-match "\*Org Src" (buffer-name (current-buffer)))
                           (org-src-source-buffer)
                         (current-buffer))
    (let ((source      (buffer-substring-no-properties (point-min) (point-max)))
          ;; line=0 is an error for jedi, but is possible for empty buffers.
          (line        (max 1 (count-lines (point-min) (min (1+ (point)) (point-max)))))
          (column      (- (point) (line-beginning-position)))
          (source-path (jedi:-buffer-file-name)))
      (epc:call-deferred (jedi:get-epc)
                         method-name
                         (list source line column source-path)))))
#+end_src

** ob-jupyter.el

In ob-jupyter.el:

;; When editing source-blocks and hitting <return>, a new
;; source-buffer will be opened and block the editing in the current
;; org-buffer, without switching over to the new buffer. To fix this, we
;; can define:

#+begin_src: text
(defun org-babel-edit-prep:jupyter-python (info)
  "Prepare the edit buffer according to INFO.
Enable `jupyter-repl-interaction-mode' in the edit buffer
associated with the session found in INFO.

If the session is a Jupyter TRAMP file name, the
`default-directory' of the edit buffer is set to the root
directory the notebook serves."
  (let* ((params (nth 2 info))
         (session (alist-get :session params))
         (client-buffer (org-babel-jupyter-initiate-session session params)))
    (jupyter-repl-associate-buffer client-buffer)
    (when (jupyter-tramp-file-name-p session)
      (setq default-directory (concat (file-remote-p session) "/")))))


;; When using (org-babel-jupyter-override-src-block "python") we need
;; this function to be defined because it won't find the above one:
(defun org-babel-execute:jupyter-python (body params)
  "Execute BODY according to PARAMS.
BODY is the code to execute for the current Jupyter `:session' in
the PARAMS alist."
  (let ((result-params (assq :result-params params))
        (async-p (or (equal (alist-get :async params) "yes")
                     (plist-member params :async))))
    (when (member "replace" result-params)
      (org-babel-jupyter-cleanup-file-links))
    (let* ((org-babel-jupyter-current-src-block-params params)
           (session (alist-get :session params))
           (buf (org-babel-jupyter-initiate-session session params))
           (jupyter-current-client (buffer-local-value 'jupyter-current-client buf))
           (lang (jupyter-kernel-language jupyter-current-client))
           (vars (org-babel-variable-assignments:jupyter params lang))
           (code (progn
                   (when-let* ((dir (alist-get :dir params)))
                     ;; `default-directory' is already set according
                     ;; to :dir when executing a source block.  Set
                     ;; :dir to the absolute path so that
                     ;; `org-babel-expand-body:jupyter' does not try
                     ;; to re-expand the path. See #302.
                     (setf (alist-get :dir params) default-directory))
                   (org-babel-expand-body:jupyter body params vars lang))))
      (pcase-let ((`(,req ,maybe-result)
                   (org-babel-jupyter--execute code async-p)))
        ;; KLUDGE: Remove the file result-parameter so that
        ;; `org-babel-insert-result' doesn't attempt to handle it while
        ;; async results are pending.  Do the same in the synchronous
        ;; case, but not if link or graphics are also result-parameters,
        ;; only in Org >= 9.2, since those in combination with file mean
        ;; to interpret the result as a file link, a useful meaning that
        ;; doesn't interfere with Jupyter style result insertion.
        ;;
        ;; Do this after sending the request since
        ;; `jupyter-generate-request' still needs access to the :file
        ;; parameter.
        (when (and (member "file" result-params)
                   (or async-p
                       (not (or (member "link" result-params)
                                (member "graphics" result-params)))))
          (org-babel-jupyter--remove-file-param params))
        (prog1 maybe-result
          ;; KLUDGE: Add the "raw" result parameter for non-inline
          ;; synchronous results because an Org formatted string is
          ;; already returned in that case and
          ;; `org-babel-insert-result' should not process it.
          (unless (or async-p
                      (jupyter-org-request-inline-block-p req))
            (nconc (alist-get :result-params params) (list "raw"))))))))
#+end_src

emacs-deferred is buggy - find all guix packages emacs-* using that adds emacs-deferred by using guix graph <pkg> and remove them. Then install the following packages at minimum:

emacs            	28.1   	out	/gnu/store/w0ssipd06il3kvyvqihpmw4lwbhwwfq3-emacs-28.1
python-virtualenv	20.3.1 	out	/gnu/store/40c42833x4wsddchwpxhilzp9v26h8m7-python-virtualenv-20.3.1
jupyter          	1.0.0  	out	/gnu/store/gl7fw3r3j9q5wwvv286zrmkffriyq5lw-jupyter-1.0.0
python-wrapper   	3.9.9  	out	/gnu/store/1m48ama708vh9cjn79yw6cj8sgg7pa1b-python-wrapper-3.9.9
emacs-zmq        	0.10.10	out	/gnu/store/x923id4s5xcs7dyarl7gzjam48q96sfq-emacs-zmq-0.10.10
python-netaddr   	0.8.0  	out	/gnu/store/d5h40v3az2l27vv141psd2agvsc6fbi6-python-netaddr-0.8.0

