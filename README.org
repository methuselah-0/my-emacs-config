* How to install
** Download this repo

The easiest thing is to download it to =~/src/my-emacs-config=, since
there are some hardcoded paths in this setup.

#+begin_src bash
  mkdir -p ~/src
  cd ~/src
  git clone https://github.com/methuselah-0/my-emacs-config.git
#+end_src

** Backup current .emacs.d and .emacs files

For example, by:

#+begin_src bash :eval never
  mv ~/.emacs ~/.emacs.bak
  mv ~/.emacs.d ~/.emacs.d.bak
#+end_src

** Create new ~/.emacs.d

*** init.el

Create the directory =~/.emacs.d= and link in init.el that will load
the file =~/.emacs.d/config.org=:

#+begin_src bash
  mkdir -p ~/.emacs.d
  ln -s ~/src/my-emacs-config/init.el ~/.emacs.d/init.el
#+end_src

*** config.org

Then add the config.org file in =~/.emacs.d/config.org=

#+begin_src bash
  ln -s ~/.emacs.d/config.org ~/src/my-emacs-config/config.org
#+end_src

*** symlink the elpa, elisp-files and snippets directories

#+begin_src bash
  ln -s ~/src/my-emacs-config/elpa ~/.emacs.d/elpa
  ln -s ~/src/my-emacs-config/elisp-files ~/.emacs.d/elisp-files
  ln -s ~/src/my-emacs-config/snippets ~/.emacs.d/snippets
#+end_src

** Install tern via npm

#+begin_src bash
  sudo npm install --prefix ~/src/my-emacs-config/ tern
#+end_src

** Add emacs packages

Some are install in elpa directory already. Remaining ones can be
installed via Guix.

*** Guix

If you don't have guix installed you can install it as a stand-alone
distro or as a package manager. Find guix-install.sh to try it out on
a "foreign distro". Make sure to run ~guix pull~ as both root and your
normal user before continuing. If you already have Guix installed, you
can just continue.

*** install emacs packages via Guix manifest

You could modify the manifest to your liking, perhaps merge and fix
with your own current list of packages or manifest. When done, apply
it with the channels file that comes with this repo:

#+begin_src bash
  guix pull -C ~/src/my-emacs-config/channels.scm
  guix package --fallback -m ~/src/my-emacs-config/manifest.scm
#+end_src

If this breaks your stuff you might have to fix stuff here before
continuing.

** Special configuration files
*** caldav-conf.el

If you add this to =~/.emacs.d/caldav-conf.el= it should be
automatically picked up because of 2 lines in the config.org that
reads it.

If the full path is
=https://nextcloud.mydomain.tld/remote.php/dav/calendars/1a2a123-a23b-1234-123a-12345678a123/calendarname/=,
you would add the following:

#+begin_src emacs-lisp :eval never :tangle ~/.emacs.d/caldav-conf.el
  (setq org-caldav-calendars
	'((:calendar-id "1a2a123-a23b-1234-123a-12345678a123/calendarname"
			:files ("~/org/home.org")
			:inbox "~/org/fromhome.org"
			:caldav-url "https://nextcloud.mydomain.tld/remote.php/dav/calendars"
			:icalendar-timezone "Europe/Stockholm"
		    )
	  ;; (:calendar-id "1a2a123-a23b-1234-123a-12345678a123/calendarname"
	  ;; 	      :files ("~/org/home.org")
	  ;; 	      :inbox "~/org/fromhome.org"
	  ;; 	      :caldav-url "https://nextcloud.mydomain.tld/remote.php/dav/calendars"
	  ;; 	      :icalendar-timezone "Europe/Stockholm"
	  ;; 	      :skip-conditions (regexp "soccer")		      
	  ;; 	  )
      ))
#+end_src

If you have ics-calendars, I don't know how to sync edits back up, but
you can at least fetch to org-format. Create the file
=~/.emacs.d/ics-calendars.txt=:

#+begin_src text :tangle "~/.emacs.d/ics-calendars.txt"
<calendar-name> <some-ics-url>
~/org/work.org
~/org/home.org
~/org/fromhome.org
~/org/notes.org
#+end_src

All these files will be fetched and reformatted on demand by the
fetch-calendars.pl script.

*** agenda files

These are your own org-files that you can add to for example:

#+begin_src emacs-lisp
  ;;'(org-agenda-files (quote ("~/org/notes.org" "~/org/work.org" "~/org/home.org")))
  (setq org-agenda-files (list "~/org/work.org"
			       "~/org/notes.org"
			       "~/org/home.org"
			       "~/org/fromhome.org"
))
  (add-hook 'after-init-hook 'org-agenda-list)
#+end_src

*** contacts files

You probably want to edit the contacts files.

** cronjob extra

For org-alert to work as intended here, we need to continuously add
the NEXT todo-keyword in the org-headers when events are within half
an hour. These needs to be inserted by a perl-script that runs once a
minute. I also have an ics-calender that I want fetched and updated
once a minute. To do this I run fetch-calendars.pl which also calls
out to ical2org.pl and org-schedule.pl and it is org-schedule.pl that
updates the NEXT header.

As I'm on GuixSD, I run the cronjob by adding the following to
=~/.config/cron/job.guile=:

#+begin_src emacs-lisp :eval never :tangle ~/.config/cron/job.guile
;; -*- geiser-scheme-implementation: guile -*-
;; make sure to add mcron & in ~/.profile
;; (job '(next-minute (range 0 60 5)) "dosomethingevery5minutes")
;; (job '(next-minute (range 0 60 10)) "dosomethingevery10minutes")
(job '(next-minute (range 0 60 1)) "perl ~/src/my-emacs-config/fetch-calendars.pl ~/.emacs.d/ics-calendars.txt ~/.emacs.d/todokeywords.txt")
#+end_src

and also by adding =mcron &= to =~/.profile=. However, before running
mcron, make sure to start emacs once first, because the
todokeywords.txt file is created via an org-mode-hook defined in
config.org so if you change the path or the hook this cronjob needs
adjusted as well. The =ics-calendars.txt= file is setup as [[*caldav-conf.el][below]].


#+begin_src bash :eval never :tangle ~/.profile
mcron &
#+end_src

* Additional info
** org-contacts2vcard

Not using this currently, but good to keep in mind: [[https://github.com/novoid/org-contacts2vcard][org-contacts2vcard]]

** vcard2org

This python script works on guix if you have the python2,
python2-vobject and python2-dateutil packages installed, and have set
the following environment variable:

#+begin_src bash
  if ! grep 'export PYTHONPATH="$GUIX_PROFILE"/lib/python2.7/site-packages"${PYTHONPATH:+:}${PYTHONPATH}"' ~/.bashrc; then echo 'export PYTHONPATH=~/.guix-profile/lib/python2.7/site-packages"${PYTHONPATH:+:}${PYTHONPATH}"' >> ~/.bashrc ; fi
#+end_src

** alert.el and org-alert.el

To use a custom libnotify that alerts you with espeak-ng, I did the
the following changes in alert.el and then ~M-x byte-compile-file RET
path-to-alert.el RET~, and restarted emacs.

At top level:

#+begin_src emacs-lisp :eval never
(defcustom alert-espeak-command (executable-find "espeak-ng")
  "Path to the espeak-ng command"
  :type 'file
  :group 'alert)
#+end_src

and inside the ~(defun alert-libnotify-notify (info)~, I added:

#+begin_src emacs-lisp :eval never
  (if alert-espeak-command
      (let* ((args
	      (list (nconc
		     (concat
		      (alert-encode-string (plist-get info :message)))))))
	(apply #'call-process alert-espeak-command nil
	       (list (get-buffer-create " *libnotify output*") t) nil args))
    (alert-message-notify info))
#+end_src

In org-alert.el, the following changes were made:

#+begin_src emacs-lisp :eval never
;; (defvar org-alert-headline-regexp "\\(Sched.+:.+\\|Deadline:.+\\)"
;;   "Regexp for headlines to search in agenda buffer.")

(defvar org-alert-headline-regexp "\\(\ NEXT\ .+\\)"
  "Regexp for headlines to search in agenda buffer.")
#+end_src

** cronjob for org-alert and org-caldav

See [[*cronjob extra][here]] under [[*How to install][How to install]].

** reveal.js

#+begin_src text
  ,* org configs

  ,#+PROPERTY: header-args:python :shebang "#!/usr/bin/env python3" :eval no-export :noweb no-export :mkdirp yes
  ,#+PROPERTY: header-args:jupyter-python :shebang "#!/usr/bin/env python3" :eval no-export :noweb no-export :mkdirp yes

  # #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
  ,#+REVEAL_ROOT: file:///home/user1/src/reveal.js
  # This needs locally available reveal.js files (no CDN files)! Instructions to set location of reveal.js..
  ,#+OPTIONS: reveal_single_file:t

  ,#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, transition:'cube'

  # file:///d:/reveal.js

  # Export defaults
  # Toggle TeX-like syntax for sub- and superscripts. If you write
  # "^:{}", b{b}b-:t will be interpreted, but the simple bbb-:t will be
  # left as it is (org-export-with-sub-superscripts).
  ,#+OPTIONS: ^:{}

  # Export with latex interpreted
  ,#+OPTIONS: tex:t
  # #+OPTIONS: tex:t

  # Export with footnotes
  ,#+OPTIONS: f:t

  # Export with emphasized text
  ,#+OPTIONS: *:t

  # nil does not export; t exports; verbatim keeps everything in verbatim (org-export-with-latex).
  ,#+OPTIONS: tex:verbatim

  # Export with special strings
  # #+OPTIONS: -:t

  # Export with tables
  ,#+OPTIONS: |:t

  # Export with fixed-width
  ,#+OPTIONS: ::t

  # Only keep the first level in table-of-contents
  # #+OPTIONS: toc:1
  # edit: create separate
  ,#+OPTIONS: toc:nil
#+end_src

