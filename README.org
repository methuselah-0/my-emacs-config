* About

This is an emacs configuration suitable for terminal use that's
focused on supporting org mode, literal programming, and the languages
python, javascript and guile. It assists in setting up a nice-looking
editor with easy navigation and auto-completion, that just works.

The init.el evaluates the emacs-lisp code-blocks in the config.org
file.

By following the installation instructions, it will also guide you
through setting up emacs-webkit which is a modern web-browser usable
from inside emacs.

The setup includes the following things, etc:
  - elpy
  - auto-complete
  - jedi, customized
  - sidebar.el
  - diff-hl-mode
  - magit
  - windmove
  - flycheck
  - jupyter
  - org-mode
    - org-babel
    - ...
    - 

** python use

M-. for go-to-definition
C-d for documentation

See more under [[file:config.org::*Programming][Programming]], and [[file:config.org::*Python][Python]].

** javascript use

To setup the tern backend for javascript auto-completion:
  1. ensure to add ~/src/my-emacs-config/node_modules to NODE_PATH
  2. add ~/src/my-emacs-config/node_modules/.bin to PATH
  3. add a .tern-project file in your javascript folders.

You have C-d for documentation of the completion options.

See more under [[file:config.org::*Programming][Programming]], and [[file:config.org::*Javascript][Javascript]].

* The installation

Warning: below method works well but it's not fool-proof and you mave
have to fix something yourself. I'm working on getting it more
automated.

To complete the setup You need to:
  - install guix and some custom guix channels
  - install many guix packages
  - manually install some elisp packages not available in melpa.

** Download this repo

The easiest thing is to download it to =~/src/my-emacs-config=, since
there are some hardcoded paths in this setup.

#+begin_src bash :tangle install.sh
  mkdir -p ~/src
  cd ~/src
  git clone https://github.com/methuselah-0/my-emacs-config.git
#+end_src

** Backup current .emacs.d and .emacs files

For example, by:

#+begin_src bash :tangle install.sh
  [[ -e ~/.emacs ]] && mv ~/.emacs ~/.emacs.bak.$$
  [[ -e ~/.emacs.d ]] && mv ~/.emacs.d ~/.emacs.d.bak.$$
#+end_src

** Create new ~/.emacs.d

*** init.el

Create the directory =~/.emacs.d= and link in init.el that will load
the file =~/.emacs.d/config.org=:

#+begin_src bash :tangle install.sh
  mkdir -p ~/.emacs.d
  ln -s ~/src/my-emacs-config/init.el ~/.emacs.d/init.el
#+end_src

*** config.org

Then add the config.org file in =~/.emacs.d/config.org=

#+begin_src bash :tangle install.sh
  ln -s ~/.emacs.d/config.org ~/src/my-emacs-config/config.org
#+end_src

*** symlink the elpa, elisp-files and snippets directories

#+begin_src bash :tangle install.sh
  ln -s ~/src/my-emacs-config/elpa ~/.emacs.d/elpa
  ln -s ~/src/my-emacs-config/elisp-files ~/.emacs.d/elisp-files
  ln -s ~/src/my-emacs-config/snippets ~/.emacs.d/snippets
#+end_src

** TODO Guix packages
Need to update this section some but should work fine regardless.

We need special channels (not anymore?)

#+begin_src bash :tangle install.sh
  guix pull -C ~/src/my-emacs-config/channels.scm
#+end_src

If this breaks your stuff you might have to fix stuff here before
continuing.

Below command creates should be enough to install most of the
necessary emacs packages on guix:

#+begin_src bash :tangle install.sh
guix package -i emacs-org-contrib the-silver-searcher python-dateutil python-vobject emacs-xmlgen emacs-tramp emacs-scheme-complete emacs-rudel emacs-realgud emacs-rainbow-delimiters emacs-nginx-mode emacs-bash-completion emacs-wget emacs-w3m emacs-pdf-tools emacs-emms emacs emacs-php-mode emacs-org-tree-slide emacs-org-bullets emacs-org emacs-org-contrib emacs-geiser emacs-flycheck emacs-ag emacs-ox-pandoc emacs-org-caldav emacs-lispy emacs-guix python-pycrypto python-pydotplus python-netaddr python-bash-kernel python-mysqlclient python-flask-sqlalchemy python-virtualenv python-trepan3k python-pytest python-yq python-jedi python-pylint python-epc emacs-ac-geiser emacs-auto-complete emacs-jupyter emacs-slime emacs-eldoc emacs-doom-themes emacs-treemacs emacs-treemacs-extra emacs-all-the-icons emacs-magit emacs-magit-todos emacs-magit-org-todos-el emacs-test-simple emacs-browse-at-remote emacs-posframe python-wrapper emacs-js2-refactor-el emacs-js2-mode emacs-elpy emacs-company-quickhelp emacs-company jupyter-next python-flake8 python-mypy python-flit python-nbdev python-quarto python-i3ipc emacs-diff-hl python-toolz emacs-pgtk-native-comp emacs-flycheck-pycheckers emacs-dash emacs-s emacs-ov emacs-projectile emacs-frame-local perl perl-data perl-datetime-format-ical perl-data-ical pandoc xlsfonts font-ghostscript font-adobe-source-code-pro font-anonymous-pro font-awesome font-bitstream-vera font-dejavu font-fantasque-sans font-fira-mono font-gnu-freefont font-gnu-unifont font-go font-google-material-design-icons font-google-noto font-google-roboto font-hack font-inconsolata font-liberation font-linuxlibertine font-mathjax font-rachana font-tamzen font-terminus font-tex-gyre font-un texinfo texlive texlive-latex-preview zathura zathura-pdf-mupdf webkitgtk-with-libsoup2 gst-libav gst-plugins-ugly gst-plugins-bad gst-plugins-good gst-plugins-base gstreamer gst-plugins-good-qt gcc-toolchain
#+end_src

Or you can install this manifest (DEPRECATED):

#+begin_src bash :tangle install-manifest.sh
cat <<'EOF' > /tmp/my_new_emacs_manifest.scm
(use-modules (guix transformations))
(define transform1
  (options->transformation
    '((with-latest . "emacs-org-contrib"))))
(packages->manifest
  (list (specification->package "the-silver-searcher")
        (specification->package "python-dateutil")
        (specification->package "python-vobject")
        (specification->package "emacs-xmlgen")
        (specification->package "emacs-tramp")
        (specification->package "emacs-scheme-complete")
        (specification->package "emacs-rudel")
        (specification->package "emacs-realgud")
        (specification->package "emacs-rainbow-delimiters")
        (specification->package "emacs-nginx-mode")
        (specification->package "emacs-bash-completion")
        (specification->package "emacs-wget")
        (specification->package "emacs-w3m")
        (specification->package "emacs-pdf-tools")
        (specification->package "emacs-emms")
        (specification->package "emacs")
        (specification->package "emacs-php-mode")
        (specification->package "emacs-org-tree-slide")
        (specification->package "emacs-org-bullets")
        (specification->package "emacs-org")
        (transform1
          (specification->package "emacs-org-contrib"))
        (specification->package "emacs-geiser")
        (specification->package "emacs-flycheck")
        (specification->package "emacs-ag")
        (specification->package "emacs-ox-pandoc")
        (specification->package "emacs-org-caldav")
        (specification->package "emacs-lispy")
        (specification->package "emacs-guix")
        (specification->package "python-pycrypto")
        (specification->package "python-pydotplus")
        (specification->package "python-netaddr")
        (specification->package "python-bash-kernel")
        (specification->package "python-mysqlclient")
        (specification->package "python-flask-sqlalchemy")
        (specification->package "python-virtualenv")
        (specification->package "python-trepan3k")
        (specification->package "python-pytest")
        (specification->package "python-yq")
        (specification->package "python-jedi")
        (specification->package "python-pylint")
        (specification->package "python-epc")
        (specification->package "emacs-ac-geiser")
        (specification->package "emacs-auto-complete")
        (specification->package "emacs-jupyter")
        (specification->package "emacs-slime")
        (specification->package "emacs-eldoc")
        (specification->package "emacs-doom-themes")
        (specification->package "emacs-treemacs")
        (specification->package "emacs-treemacs-extra")
        (specification->package "emacs-all-the-icons")
        (specification->package "emacs-magit")
        (specification->package "emacs-magit-todos")
        (specification->package "emacs-magit-org-todos-el")
        (specification->package "emacs-test-simple")
        (specification->package "emacs-browse-at-remote")
        (specification->package "emacs-posframe")
        (specification->package "python-wrapper")
        (specification->package "emacs-js2-refactor-el")
        (specification->package "emacs-js2-mode")
        (specification->package "emacs-elpy")
        (specification->package "emacs-company-quickhelp")
        (specification->package "emacs-company")
        (specification->package "jupyter-next")
        (specification->package "python-flake8")
        (specification->package "python-mypy")
        (specification->package "python-flit")
        (specification->package "python-nbdev")
        (specification->package "python-quarto")
        (specification->package "python-i3ipc")
        (specification->package "emacs-diff-hl")
        (specification->package "python-toolz")
        (specification->package "emacs-pgtk-native-comp")
        (specification->package "emacs-flycheck-pycheckers")
        (specification->package "emacs-dash")
        (specification->package "emacs-s")
        (specification->package "emacs-ov")
        (specification->package "emacs-projectile")
        (specification->package "emacs-frame-local")
        (specification->package "perl")
        (specification->package "perl-data")
        (specification->package
          "perl-datetime-format-ical")
        (specification->package "perl-data-ical")
        (specification->package "pandoc")
        (specification->package "xlsfonts")
        (specification->package "font-ghostscript")
        (specification->package
          "font-adobe-source-code-pro")
        (specification->package "font-anonymous-pro")
        (specification->package "font-awesome")
        (specification->package "font-bitstream-vera")
        (specification->package "font-dejavu")
        (specification->package "font-fantasque-sans")
        (specification->package "font-fira-mono")
        (specification->package "font-gnu-freefont")
        (specification->package "font-gnu-unifont")
        (specification->package "font-go")
        (specification->package
          "font-google-material-design-icons")
        (specification->package "font-google-noto")
        (specification->package "font-google-roboto")
        (specification->package "font-hack")
        (specification->package "font-inconsolata")
        (specification->package "font-liberation")
        (specification->package "font-linuxlibertine")
        (specification->package "font-mathjax")
        (specification->package "font-rachana")
        (specification->package "font-tamzen")
        (specification->package "font-terminus")
        (specification->package "font-tex-gyre")
        (specification->package "font-un")
        (specification->package "texinfo")
        (specification->package "texlive")
        (specification->package "texlive-latex-preview")
        (specification->package "zathura")
        (specification->package "zathura-pdf-mupdf")
))
EOF
guix package -m /tmp/my_new_emacs_manifest.scm
#+end_src

#+RESULTS:

** Install tern via npm

#+begin_src bash :tangle install.sh
  npm install --prefix ~/src/my-emacs-config/ tern
#+end_src

** Manually install some emacs packages
You need to install the following emacs packages yourself:

+ icons-in-terminal
+ sidebar.el
+ font-lock+
+ emacs-webkit

git clone them to =~/src=, then install icons-in-terminal via it's
shell-script install file:

#+begin_src bash :tangle install.sh
mkdir -p ~/src
cd ~/src
git clone https://github.com/sebastiencs/icons-in-terminal.git
git clone https://github.com/sebastiencs/sidebar.el.git
#wget "https://www.emacswiki.org/emacs/download/font-lock%2b.el"
cd ~/src/icons-in-terminal && ./install.sh
#+end_src

After that visit the file =~/src/sidebar.el/sidebar.el= and run =M-x
package-install-from-buffer=, and the same for font-lock+ which is
located in the =~/src/my-emacs-config/elisp-files= directory.

You need to download and compile emacs-webkit:

#+begin_src emacs-lisp
cd ~/src/my-emacs-config/
git clone https://github.com/akirakyle/emacs-webkit.git
cd emacs-webkit
CC=gcc make
#+end_src

** Ready to run

For gui example, add this to your =.bashrc=: ~alias
emacs='GTK_THEME=Adwaita:dark emacs -mm'~.

** Special configuration files
*** caldav-conf.el

If you add this to =~/.emacs.d/caldav-conf.el= it should be
automatically picked up because of 2 lines in the config.org that
reads it.

If the full path is
=https://nextcloud.mydomain.tld/remote.php/dav/calendars/1a2a123-a23b-1234-123a-12345678a123/calendarname/=,
you would add the following:

#+begin_src emacs-lisp :eval never :tangle ~/.emacs.d/caldav-conf.el
  (setq org-caldav-calendars
	'((:calendar-id "1a2a123-a23b-1234-123a-12345678a123/calendarname"
			:files ("~/org/home.org")
			:inbox "~/org/fromhome.org"
			:caldav-url "https://nextcloud.mydomain.tld/remote.php/dav/calendars"
			:icalendar-timezone "Europe/Stockholm"
		    )
	  ;; (:calendar-id "1a2a123-a23b-1234-123a-12345678a123/calendarname"
	  ;; 	      :files ("~/org/home.org")
	  ;; 	      :inbox "~/org/fromhome.org"
	  ;; 	      :caldav-url "https://nextcloud.mydomain.tld/remote.php/dav/calendars"
	  ;; 	      :icalendar-timezone "Europe/Stockholm"
	  ;; 	      :skip-conditions (regexp "soccer")		      
	  ;; 	  )
      ))
#+end_src

If you have ics-calendars, I don't know how to sync edits back up, but
you can at least fetch to org-format. Create the file
=~/.emacs.d/ics-calendars.txt=:

#+begin_src text :tangle "~/.emacs.d/ics-calendars.txt"
<calendar-name> <some-ics-url>
~/org/work.org
~/org/home.org
~/org/fromhome.org
~/org/notes.org
#+end_src

All these files will be fetched and reformatted on demand by the
fetch-calendars.pl script, if you set it up, see [[*cronjob extra][cronjob extra]].

*** agenda files

These are your own org-files that you can add to for example:

#+begin_src emacs-lisp
  ;;'(org-agenda-files (quote ("~/org/notes.org" "~/org/work.org" "~/org/home.org")))
  (setq org-agenda-files (list "~/org/work.org"
			       "~/org/notes.org"
			       "~/org/home.org"
			       "~/org/fromhome.org"
))
  (add-hook 'after-init-hook 'org-agenda-list)
#+end_src

*** contacts files

You probably want to edit the contacts files.

** cronjob extra

For org-alert to work as intended here, we need to continuously add
the NEXT todo-keyword in the org-headers when events are within half
an hour. These needs to be inserted by a perl-script that runs once a
minute. I also have an ics-calender that I want fetched and updated
once a minute. To do this I run fetch-calendars.pl which also calls
out to ical2org.pl and org-schedule.pl and it is org-schedule.pl that
updates the NEXT header.

As I'm on GuixSD, I run the cronjob by adding the following to
=~/.config/cron/job.guile=:

#+begin_src emacs-lisp :eval never :tangle ~/.config/cron/job.guile
;; -*- geiser-scheme-implementation: guile -*-
;; make sure to add mcron & in ~/.profile
;; (job '(next-minute (range 0 60 5)) "dosomethingevery5minutes")
;; (job '(next-minute (range 0 60 10)) "dosomethingevery10minutes")
(job '(next-minute (range 0 60 1)) "perl ~/src/my-emacs-config/fetch-calendars.pl ~/.emacs.d/ics-calendars.txt ~/.emacs.d/todokeywords.txt")
#+end_src

and also by adding =mcron &= to =~/.profile=. However, before running
mcron, make sure to start emacs once first, because the
todokeywords.txt file is created via an org-mode-hook defined in
config.org so if you change the path or the hook this cronjob needs
adjusted as well. The =ics-calendars.txt= file is setup as [[*caldav-conf.el][below]].


#+begin_src bash :eval never :tangle ~/.profile
mcron &
#+end_src

* Additional info
** org-contacts2vcard

Not using this currently, but good to keep in mind: [[https://github.com/novoid/org-contacts2vcard][org-contacts2vcard]]

** vcard2org

This python script works on guix if you have the python2,
python2-vobject and python2-dateutil packages installed, and have set
the following environment variable:

#+begin_src bash
  if ! grep 'export PYTHONPATH="$GUIX_PROFILE"/lib/python2.7/site-packages"${PYTHONPATH:+:}${PYTHONPATH}"' ~/.bashrc; then echo 'export PYTHONPATH=~/.guix-profile/lib/python2.7/site-packages"${PYTHONPATH:+:}${PYTHONPATH}"' >> ~/.bashrc ; fi
#+end_src

** alert.el and org-alert.el

To use a custom libnotify that alerts you with espeak-ng, I did the
the following changes in alert.el and then ~M-x byte-compile-file RET
path-to-alert.el RET~, and restarted emacs.

At top level:

#+begin_src emacs-lisp :eval never
(defcustom alert-espeak-command (executable-find "espeak-ng")
  "Path to the espeak-ng command"
  :type 'file
  :group 'alert)
#+end_src

and inside the ~(defun alert-libnotify-notify (info)~, I added:

#+begin_src emacs-lisp :eval never
  (if alert-espeak-command
      (let* ((args
	      (list (nconc
		     (concat
		      (alert-encode-string (plist-get info :message)))))))
	(apply #'call-process alert-espeak-command nil
	       (list (get-buffer-create " *libnotify output*") t) nil args))
    (alert-message-notify info))
#+end_src

In org-alert.el, the following changes were made:

#+begin_src emacs-lisp :eval never
;; (defvar org-alert-headline-regexp "\\(Sched.+:.+\\|Deadline:.+\\)"
;;   "Regexp for headlines to search in agenda buffer.")

(defvar org-alert-headline-regexp "\\(\ NEXT\ .+\\)"
  "Regexp for headlines to search in agenda buffer.")
#+end_src

** cronjob for org-alert and org-caldav

See [[*cronjob extra][here]] under [[*The installation][The installation]].

** reveal.js

#+begin_src text
  ,* org configs

  ,#+PROPERTY: header-args:python :shebang "#!/usr/bin/env python3" :eval no-export :noweb no-export :mkdirp yes
  ,#+PROPERTY: header-args:jupyter-python :shebang "#!/usr/bin/env python3" :eval no-export :noweb no-export :mkdirp yes

  # #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
  ,#+REVEAL_ROOT: file:///home/user1/src/reveal.js
  # This needs locally available reveal.js files (no CDN files)! Instructions to set location of reveal.js..
  ,#+OPTIONS: reveal_single_file:t

  ,#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, transition:'cube'

  # file:///d:/reveal.js

  # Export defaults
  # Toggle TeX-like syntax for sub- and superscripts. If you write
  # "^:{}", b{b}b-:t will be interpreted, but the simple bbb-:t will be
  # left as it is (org-export-with-sub-superscripts).
  ,#+OPTIONS: ^:{}

  # Export with latex interpreted
  ,#+OPTIONS: tex:t
  # #+OPTIONS: tex:t

  # Export with footnotes
  ,#+OPTIONS: f:t

  # Export with emphasized text
  ,#+OPTIONS: *:t

  # nil does not export; t exports; verbatim keeps everything in verbatim (org-export-with-latex).
  ,#+OPTIONS: tex:verbatim

  # Export with special strings
  # #+OPTIONS: -:t

  # Export with tables
  ,#+OPTIONS: |:t

  # Export with fixed-width
  ,#+OPTIONS: ::t

  # Only keep the first level in table-of-contents
  # #+OPTIONS: toc:1
  # edit: create separate
  ,#+OPTIONS: toc:nil
#+end_src

